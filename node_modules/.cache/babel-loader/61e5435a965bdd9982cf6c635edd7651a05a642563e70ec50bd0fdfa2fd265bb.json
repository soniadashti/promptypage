{"ast":null,"code":"import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nconst name = \"@firebase/database\";\nconst version = \"0.14.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** The semver (www.semver.org) version of the SDK. */\nlet SDK_VERSION = '';\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\nclass DOMStorageWrapper {\n  /**\r\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  constructor(domStorage_) {\n    this.domStorage_ = domStorage_;\n    // Use a prefix to avoid collisions with other stuff saved by the app.\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param key - The key to save the value under\r\n   * @param value - The value being stored, or null to remove the key.\r\n   */\n  set(key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n  /**\r\n   * @returns The value that was stored under this key, or null\r\n   */\n  get(key) {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n  remove(key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n  prefixedName_(name) {\n    return this.prefix_ + name;\n  }\n  toString() {\n    return this.domStorage_.toString();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\nclass MemoryStorage {\n  constructor() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n  set(key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n  get(key) {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n  remove(key) {\n    delete this.cache_[key];\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\nconst createStoragefor = function (domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logClient = new Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\nconst LUIDGenerator = function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\nconst sha1 = function (str) {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\nconst buildLogMessage_ = function () {\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n    if (Array.isArray(arg) || arg && typeof arg === 'object' &&\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\nlet logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n */\nlet firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\nconst enableLogging$1 = function (logger_, persistent) {\n  assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\nconst log = function () {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging$1(true);\n    }\n  }\n  if (logger) {\n    for (var _len = arguments.length, varArgs = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      varArgs[_key2] = arguments[_key2];\n    }\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\nconst logWrapper = function (prefix) {\n  return function () {\n    for (var _len2 = arguments.length, varArgs = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      varArgs[_key3] = arguments[_key3];\n    }\n    log(prefix, ...varArgs);\n  };\n};\nconst error = function () {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...arguments);\n  logClient.error(message);\n};\nconst fatal = function () {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...arguments)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\nconst warn = function () {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...arguments);\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\nconst warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\nconst isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data !== data ||\n  // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\nconst executeWhenDOMReady = function (fn) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      window.attachEvent('onload', wrappedFn);\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\nconst MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\nconst MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\nconst nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @returns {!number} comparison result.\r\n */\nconst stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\nconst requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n  }\n};\nconst ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\nconst splitStringBySize = function (str, segsize) {\n  const len = str.length;\n  if (len <= segsize) {\n    return [str];\n  }\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\nfunction each(obj, fn) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\nconst doubleToIEEE754String = function (v) {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << ebits - 1) - 1;\n  let s, e, f, ln, i;\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\nconst isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\nconst isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\nfunction errorForServerCode(code, query) {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n  const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error.code = code.toUpperCase();\n  return error;\n}\n/**\r\n * Used to test for integer-looking strings\r\n */\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\nconst INTEGER_32_MIN = -2147483648;\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\nconst INTEGER_32_MAX = 2147483647;\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\nconst tryParseInt = function (str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\nconst exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\nconst beingCrawled = function () {\n  const userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || '';\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\nconst setTimeoutNonBlocking = function (fn, time) {\n  const timeout = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (typeof timeout === 'number' &&\n  // @ts-ignore Is only defined in Deno environments.\n  typeof Deno !== 'undefined' &&\n  // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n  Deno['unrefTimer']) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n  return timeout;\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\nclass AppCheckTokenProvider {\n  constructor(appName_, appCheckProvider) {\n    this.appName_ = appName_;\n    this.appCheckProvider = appCheckProvider;\n    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({\n      optional: true\n    });\n    if (!this.appCheck) {\n      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => this.appCheck = appCheck);\n    }\n  }\n  getToken(forceRefresh) {\n    if (!this.appCheck) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n  addTokenChangeListener(listener) {\n    var _a;\n    (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\n  }\n  notifyForInvalidToken() {\n    warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` + 'are invalid. This usually indicates your app was not initialized correctly.');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\nclass FirebaseAuthTokenProvider {\n  constructor(appName_, firebaseOptions_, authProvider_) {\n    this.appName_ = appName_;\n    this.firebaseOptions_ = firebaseOptions_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => this.auth_ = auth);\n    }\n  }\n  getToken(forceRefresh) {\n    if (!this.auth_) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n  addTokenChangeListener(listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_.get().then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n  removeTokenChangeListener(listener) {\n    this.authProvider_.get().then(auth => auth.removeAuthTokenListener(listener));\n  }\n  notifyForInvalidToken() {\n    let errorMessage = 'Provided authentication credentials for the app named \"' + this.appName_ + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nclass EmulatorTokenProvider {\n  constructor(accessToken) {\n    this.accessToken = accessToken;\n  }\n  getToken(forceRefresh) {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n  addTokenChangeListener(listener) {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n  removeTokenChangeListener(listener) {}\n  notifyForInvalidToken() {}\n}\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f';\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A class that holds metadata about a Repo object\r\n */\nclass RepoInfo {\n  /**\r\n   * @param host - Hostname portion of the url for the repo\r\n   * @param secure - Whether or not this repo is accessed over ssl\r\n   * @param namespace - The namespace represented by the repo\r\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n   * @param persistenceKey - Override the default session persistence storage key\r\n   */\n  constructor(host, secure, namespace, webSocketOnly) {\n    let nodeAdmin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let persistenceKey = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n    let includeNamespaceInQueryParams = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let isUsingEmulator = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this.isUsingEmulator = isUsingEmulator;\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this._host;\n  }\n  isCacheableHost() {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n  isCustomHost() {\n    return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';\n  }\n  get host() {\n    return this._host;\n  }\n  set host(newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n  toString() {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n  toURLString() {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams ? `?ns=${this.namespace}` : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\nfunction repoInfoNeedsQueryParam(repoInfo) {\n  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;\n}\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n  let connURL;\n  if (type === WEBSOCKET) {\n    connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n  const pairs = [];\n  each(params, (key, value) => {\n    pairs.push(key + '=' + value);\n  });\n  return connURL + pairs.join('&');\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Tracks a collection of stats.\r\n */\nclass StatsCollection {\n  constructor() {\n    this.counters_ = {};\n  }\n  incrementCounter(name) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n    this.counters_[name] += amount;\n  }\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst collections = {};\nconst reporters = {};\nfunction statsManagerGetCollection(repoInfo) {\n  const hashString = repoInfo.toString();\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n  return collections[hashString];\n}\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n  const hashString = repoInfo.toString();\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n  return reporters[hashString];\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\nclass PacketReceiver {\n  /**\r\n   * @param onMessage_\r\n   */\n  constructor(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n  closeAfter(responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   */\n  handleResponse(requestNum, data) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n */\nclass BrowserPollConnection {\n  /**\r\n   * @param connId An identifier for this connection, used for logging\r\n   * @param repoInfo The info for the endpoint to send data to.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The AppCheck token for this client.\r\n   * @param authToken The AuthToken to use for this connection.\r\n   * @param transportSessionId Optional transportSessionid if we are\r\n   * reconnecting for an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n   * already created a connection previously\r\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = params => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n  open(onMessage, onDisconnect) {\n    var _this = this;\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT));\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n        const [command, arg1, arg2, arg3, arg4] = args;\n        _this.incrementIncomingBytes_(args);\n        if (!_this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n        _this.everConnected_ = true;\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false;\n            // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n            _this.myPacketOrderer.closeAfter(arg1, () => {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        for (var _len4 = arguments.length, args = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n        const [pN, data] = args;\n        _this.incrementIncomingBytes_(args);\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, () => {\n        this.onClosed_();\n      }, this.urlFn);\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  }\n  /**\r\n   * No-op for polling\r\n   */\n  markConnectionHealthy() {}\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   */\n  shutdown_() {\n    this.isClosed_ = true;\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n  /**\r\n   * Triggered when this transport is closed\r\n   */\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param data - The JSON data to transmit.\r\n   */\n  send(data) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  }\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   */\n  addDisconnectPingFrame(id, pw) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  }\n  /**\r\n   * Used to track the bytes received by this client\r\n   */\n  incrementIncomingBytes_(args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\nclass FirebaseIFrameScriptHolder {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn;\n    //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n    this.outstandingRequests = new Set();\n    //A queue of the pending segments waiting for transmission to the server.\n    this.pendingSegs = [];\n    //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n    this.currentSerial = Math.floor(Math.random() * 100000000);\n    // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n    this.sendNewPolls = true;\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   */\n  static createIFrame_() {\n    const iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  }\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param id - The ID of this connection\r\n   * @param pw - The password for this connection\r\n   */\n  startLongPoll(id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n  newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n  enqueueSegment(segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    });\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param url - The URL of the script tag.\r\n   * @param serial - The serial number of the request.\r\n   */\n  addLongPollTag_(url, serial) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n    this.addTag(url, readyStateCB);\n  }\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param url - The URL for the script tag source.\r\n   * @param loadCB - A callback to be triggered once the script has loaded.\r\n   */\n  addTag(url, loadCB) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = newScript.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = newScript.readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = newScript.onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\nclass WebSocketConnection {\n  /**\r\n   * @param connId identifier for this transport\r\n   * @param repoInfo The info for the websocket endpoint.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The App Check Token for this client.\r\n   * @param authToken The Auth Token for this client.\r\n   * @param transportSessionId Optional transportSessionId if this is connecting\r\n   * to an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if there was a previous\r\n   * connection\r\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n  /**\r\n   * @param repoInfo - The info for the websocket endpoint.\r\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n   * @returns connection url\r\n   */\n  static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\n    const urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n    if (!isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n  open(onMessage, onDisconnect) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n    try {\n      let options;\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m);\n    };\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n  start() {}\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n  static isAvailable() {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  }\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   */\n  static previouslyFailed() {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  }\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n  appendFrame_(data) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess);\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n  /**\r\n   * @param frameCount - The number of frames we are expecting from the server\r\n   */\n  handleNewFrameCount_(frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @returns Any remaining data to be process, or null if there is none\r\n   */\n  extractFrameCount_(data) {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess - The frame data\r\n   */\n  handleIncomingFrame(mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n\n    const data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n  /**\r\n   * Send a message to the server\r\n   * @param data - The JSON object to transmit\r\n   */\n  send(data) {\n    this.resetKeepAlive();\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n  shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  }\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param str - String to send.\r\n   */\n  sendString_(str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\nclass TransportManager {\n  /**\r\n   * @param repoInfo - Metadata around the namespace we're connecting to\r\n   */\n  constructor(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n  /**\r\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n   * TransportManager has already set up transports_\r\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n  initTransports_(repoInfo) {\n    const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n      isSkipPollConnection = true;\n    }\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = this.transports_ = [];\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n  /**\r\n   * @returns The constructor for the initial transport to use\r\n   */\n  initialTransport() {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n  /**\r\n   * @returns The constructor for the next transport, or null\r\n   */\n  upgradeTransport() {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n// Keeps track of whether the TransportManager has already chosen a transport to use\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\nclass Connection {\n  /**\r\n   * @param id - an id for this connection\r\n   * @param repoInfo_ - the info for the endpoint to connect to\r\n   * @param applicationId_ - the Firebase App ID for this project\r\n   * @param appCheckToken_ - The App Check Token for this device.\r\n   * @param authToken_ - The auth token for this session.\r\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.appCheckToken_ = appCheckToken_;\n    this.authToken_ = authToken_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0 /* RealtimeState.CONNECTING */;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   */\n  start_() {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (this.conn_ && this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has received ' + this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (this.conn_ && this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has sent ' + this.conn_.bytesSent + ' bytes.  Leaving connection alive.');\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS));\n    }\n  }\n  nextTransportId_() {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n  disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n  connReceiver_(conn) {\n    return message => {\n      if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n  /**\r\n   * @param dataMsg - An arbitrary data message to be sent to the server\r\n   */\n  sendRequest(dataMsg) {\n    // wrap in a data message envelope and send it on\n    const msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  }\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  onSecondaryControl_(controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE];\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n  onSecondaryMessageReceived_(parsedData) {\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n  upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n  proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    });\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  }\n  onPrimaryMessageReceived_(parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n  onDataMessage_(message) {\n    this.onPrimaryResponse_();\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n  onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n  onControl_(controlData) {\n    const cmd = requireKey(MESSAGE_TYPE, controlData);\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = Object.assign({}, payload);\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n  /**\r\n   * @param handshake - The handshake data returned from the server\r\n   */\n  onHandshake_(handshake) {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n  tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n  startUpgrade_(conn) {\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n  onReset_(host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n  onConnectionEstablished_(conn, timestamp) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1 /* RealtimeState.CONNECTED */;\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n  sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\n      this.log_('sending ping on primary.');\n      this.sendData_({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n  onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n  /**\r\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   */\n  onConnectionLost_(everConnected) {\n    this.conn_ = null;\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n      this.log_('Realtime connection lost.');\n    }\n    this.close();\n  }\n  onConnectionShutdown_(reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n    this.close();\n  }\n  sendData_(data) {\n    if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n  close() {\n    if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n      this.log_('Closing realtime connection.');\n      this.state_ = 2 /* RealtimeState.DISCONNECTED */;\n      this.closeConnections_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\nclass ServerActions {\n  put(pathString, data, onComplete, hash) {}\n  merge(pathString, data, onComplete, hash) {}\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param token - The authentication token\r\n   */\n  refreshAuthToken(token) {}\n  /**\r\n   * Refreshes the app check token for the current connection.\r\n   * @param token The app check token\r\n   */\n  refreshAppCheckToken(token) {}\n  onDisconnectPut(pathString, data, onComplete) {}\n  onDisconnectMerge(pathString, data, onComplete) {}\n  onDisconnectCancel(pathString, onComplete) {}\n  reportStats(stats) {}\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\nclass EventEmitter {\n  constructor(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   */\n  trigger(eventType) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n      for (var _len5 = arguments.length, varArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {\n        varArgs[_key6 - 1] = arguments[_key6];\n      }\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n  on(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback,\n      context\n    });\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n  off(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n  validateEventType_(eventType) {\n    assert(this.allowedEvents_.find(et => {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\nclass OnlineMonitor extends EventEmitter {\n  constructor() {\n    super(['online']);\n    this.online_ = true;\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !isMobileCordova()) {\n      window.addEventListener('online', () => {\n        if (!this.online_) {\n          this.online_ = true;\n          this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', () => {\n        if (this.online_) {\n          this.online_ = false;\n          this.trigger('online', false);\n        }\n      }, false);\n    }\n  }\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n  getInitialEvent(eventType) {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n  currentlyOnline() {\n    return this.online_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\nclass Path {\n  /**\r\n   * @param pathOrString - Path string to parse, or another path, or the raw\r\n   * tokens array\r\n   */\n  constructor(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/');\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n  toString() {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n    return pathString || '/';\n  }\n}\nfunction newEmptyPath() {\n  return new Path('');\n}\nfunction pathGetFront(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  return path.pieces_[path.pieceNum_];\n}\n/**\r\n * @returns The number of segments in this path\r\n */\nfunction pathGetLength(path) {\n  return path.pieces_.length - path.pieceNum_;\n}\nfunction pathPopFront(path) {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\nfunction pathGetBack(path) {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n  return null;\n}\nfunction pathToUrlEncodedString(path) {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n  return pathString || '/';\n}\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\nfunction pathSlice(path) {\n  let begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\nfunction pathParent(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  return new Path(pieces, 0);\n}\nfunction pathChild(path, childPathObj) {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n  return new Path(pieces, 0);\n}\n/**\r\n * @returns True if there are no segments in this path\r\n */\nfunction pathIsEmpty(path) {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\nfunction newRelativePath(outerPath, innerPath) {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n  }\n}\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\nfunction pathCompare(left, right) {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\r\n * @returns true if paths are the same.\r\n */\nfunction pathEquals(path, other) {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n  for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\nfunction pathContains(path, other) {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\nclass ValidationPath {\n  /**\r\n   * @param path - Initial Path.\r\n   * @param errorPrefix_ - Prefix for any error messages.\r\n   */\n  constructor(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\nfunction validationPathPush(validationPath, child) {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\nfunction validationPathPop(validationPath) {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\nfunction validationPathCheckValid(validationPath) {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));\n  }\n}\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\nfunction validationPathToErrorString(validationPath) {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass VisibilityMonitor extends EventEmitter {\n  constructor() {\n    super(['visible']);\n    let hidden;\n    let visibilityChange;\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, () => {\n        const visible = !document[hidden];\n        if (visible !== this.visible_) {\n          this.visible_ = visible;\n          this.trigger('visible', visible);\n        }\n      }, false);\n    }\n  }\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n  getInitialEvent(eventType) {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\nclass PersistentConnection extends ServerActions {\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param applicationId_ - The Firebase App ID for this project\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.onConnectStatus_ = onConnectStatus_;\n    this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    this.authOverride_ = authOverride_;\n    // Used for diagnostic logging.\n    this.id = PersistentConnection.nextPersistentConnectionId_++;\n    this.log_ = logWrapper('p:' + this.id + ':');\n    this.interruptReasons_ = {};\n    this.listens = new Map();\n    this.outstandingPuts_ = [];\n    this.outstandingGets_ = [];\n    this.outstandingPutCount_ = 0;\n    this.outstandingGetCount_ = 0;\n    this.onDisconnectRequestQueue_ = [];\n    this.connected_ = false;\n    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    this.securityDebugCallback_ = null;\n    this.lastSessionId = null;\n    this.establishConnectionTimer_ = null;\n    this.visible_ = false;\n    // Before we get connected, we keep a queue of pending messages to send.\n    this.requestCBHash_ = {};\n    this.requestNumber_ = 0;\n    this.realtime_ = null;\n    this.authToken_ = null;\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = false;\n    this.invalidAuthTokenCount_ = 0;\n    this.invalidAppCheckTokenCount_ = 0;\n    this.firstConnection_ = true;\n    this.lastConnectionAttemptTime_ = null;\n    this.lastConnectionEstablishedTime_ = null;\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n  sendRequest(action, body, onResponse) {\n    const curReqNum = ++this.requestNumber_;\n    const msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(stringify(msg));\n    assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n  get(query) {\n    this.initConnection_();\n    const deferred = new Deferred();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: message => {\n        const payload = message['d'];\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n    return deferred.promise;\n  }\n  listen(query, currentHashFn, tag, onComplete) {\n    this.initConnection_();\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n    assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\n    const listenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n  sendGet_(index) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, message => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n  sendListen_(listenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/p: pathString\n    };\n    const action = 'q';\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n    req[/*hash*/'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, message => {\n      const payload = message[/*data*/'d'];\n      const status = message[/*status*/'s'];\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n      const currentListenSpec = this.listens.get(pathString) && this.listens.get(pathString).get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n  static warnOnListenWarnings_(payload, query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(`Using an unspecified index. Your data will be downloaded and ` + `filtered on the client. Consider adding ${indexSpec} at ` + `${indexPath} to your security rules for better performance.`);\n      }\n    }\n  }\n  refreshAuthToken(token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n  reduceReconnectDelayIfAdminCredential_(credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n  refreshAppCheckToken(token) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData = {\n        cred: token\n      };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(authMethod, requestData, res => {\n        const status = res[/*status*/'s'];\n        const data = res[/*data*/'d'] || 'error';\n        if (this.authToken_ === token) {\n          if (status === 'ok') {\n            this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  }\n  /**\r\n   * Attempts to authenticate with the given token. If the authentication\r\n   * attempt fails, it's triggered like the token was revoked (the connection is\r\n   * closed).\r\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest('appcheck', {\n        'token': this.appCheckToken_\n      }, res => {\n        const status = res[/*status*/'s'];\n        const data = res[/*data*/'d'] || 'error';\n        if (status === 'ok') {\n          this.invalidAppCheckTokenCount_ = 0;\n        } else {\n          this.onAppCheckRevoked_(status, data);\n        }\n      });\n    }\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  unlisten(query, tag) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n  sendUnlisten_(pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/p: pathString\n    };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n    this.sendRequest(action, req);\n  }\n  onDisconnectPut(pathString, data, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n  onDisconnectMerge(pathString, data, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n  onDisconnectCancel(pathString, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n  sendOnDisconnect_(action, pathString, data, onComplete) {\n    const request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, response => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(response[/*status*/'s'], response[/* data */'d']);\n        }, Math.floor(0));\n      }\n    });\n  }\n  put(pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n  merge(pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n  putInternal(action, pathString, data, onComplete, hash) {\n    this.initConnection_();\n    const request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    if (hash !== undefined) {\n      request[/*hash*/'h'] = hash;\n    }\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n  sendPut_(index) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, message => {\n      this.log_(action + ' response', message);\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n      if (onComplete) {\n        onComplete(message[/*status*/'s'], message[/* data */'d']);\n      }\n    });\n  }\n  reportStats(stats) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = {\n        /*counters*/c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest( /*stats*/'s', request, result => {\n        const status = result[/*status*/'s'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */'d'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n  onDataMessage_(message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'];\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  }\n  onDataPush_(action, body) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge*/false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge=*/true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[/*path*/'p'], body[/*query*/'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + stringify(action) + '\\nAre you using the latest client?');\n    }\n  }\n  onReady_(timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n  scheduleConnect_(timeout) {\n    assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout));\n  }\n  initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n  onVisible_(visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n  onOnline_(online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n  onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n      const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n    this.onConnectStatus_(false);\n  }\n  async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg) {\n        assert(connection, \"sendRequest call when we're not connected not allowed.\");\n        connection.sendRequest(msg);\n      };\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([this.authTokenProvider_.getToken(forceRefresh), this.appCheckTokenProvider_.getToken(forceRefresh)]);\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, /* onKill= */reason => {\n            warn(reason + ' (' + this.repoInfo_.toString() + ')');\n            this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          }, lastSessionId);\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n  interrupt(reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n  resume(reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n  handleTimestamp_(timestamp) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  }\n  cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n  onListenRevoked_(pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n  removeListen_(pathString, queryId) {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n  onAuthRevoked_(statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n  onAppCheckRevoked_(statusCode, explanation) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n  onSecurityDebugPacket_(body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  }\n  restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n  /**\r\n   * Sends client stats for first connection\r\n   */\n  sendConnectStats_() {\n    const stats = {};\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n  shouldReconnect_() {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass NamedNode {\n  constructor(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n  static Wrap(name, node) {\n    return new NamedNode(name, node);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Index {\n  /**\r\n   * @returns A standalone comparison function for\r\n   * this index\r\n   */\n  getCompare() {\n    return this.compare.bind(this);\n  }\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   *\r\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n  indexedValueChanged(oldNode, newNode) {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n  /**\r\n   * @returns a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet __EMPTY_NODE;\nclass KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a, b) {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return false; // The key for a node never changes.\n  }\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n  makePost(indexValue, name) {\n    assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.key';\n  }\n}\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An iterator over an LLRBNode.\r\n */\nclass SortedMapIterator {\n  /**\r\n   * @param node - Node to iterate.\r\n   * @param isReverse_ - Whether or not to iterate in reverse\r\n   */\n  constructor(node, startKey, comparator, isReverse_) {\n    let resultGenerator_ = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    this.nodeStack_ = [];\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n  getNext() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    let node = this.nodeStack_.pop();\n    let result;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n    return result;\n  }\n  hasNext() {\n    return this.nodeStack_.length > 0;\n  }\n  peek() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  }\n}\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\nclass LLRBNode {\n  /**\r\n   * @param key - Key associated with this node.\r\n   * @param value - Value associated with this node.\r\n   * @param color - Whether this node is red.\r\n   * @param left - Left child.\r\n   * @param right - Right child.\r\n   */\n  constructor(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param key - New key for the node, or null.\r\n   * @param value - New value for the node, or null.\r\n   * @param color - New color for the node, or null.\r\n   * @param left - New left child for the node, or null.\r\n   * @param right - New right child for the node, or null.\r\n   * @returns The node copy.\r\n   */\n  copy(key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  }\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n  count() {\n    return this.left.count() + 1 + this.right.count();\n  }\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n  isEmpty() {\n    return false;\n  }\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n  inorderTraversal(action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  }\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  }\n  /**\r\n   * @returns The minimum node in the tree.\r\n   */\n  min_() {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  }\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n  minKey() {\n    return this.min_().key;\n  }\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n  maxKey() {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n  /**\r\n   * @param key - Key to insert.\r\n   * @param value - Value to insert.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the key/value added.\r\n   */\n  insert(key, value, comparator) {\n    let n = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n    return n.fixUp_();\n  }\n  /**\r\n   * @returns New tree, with the minimum key removed.\r\n   */\n  removeMin_() {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n    let n = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  }\n  /**\r\n   * @param key - The key of the item to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the specified item removed.\r\n   */\n  remove(key, comparator) {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n  /**\r\n   * @returns Whether this is a RED node.\r\n   */\n  isRed_() {\n    return this.color;\n  }\n  /**\r\n   * @returns New tree after performing any needed rotations.\r\n   */\n  fixUp_() {\n    let n = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\r\n   * @returns New tree, after moveRedLeft.\r\n   */\n  moveRedLeft_() {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\r\n   * @returns New tree, after moveRedRight.\r\n   */\n  moveRedRight_() {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\r\n   * @returns New tree, after rotateLeft.\r\n   */\n  rotateLeft_() {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  }\n  /**\r\n   * @returns New tree, after rotateRight.\r\n   */\n  rotateRight_() {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  }\n  /**\r\n   * @returns Newt ree, after colorFlip.\r\n   */\n  colorFlip_() {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n  /**\r\n   * For testing.\r\n   *\r\n   * @returns True if all is well.\r\n   */\n  checkMaxDepth_() {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n  check_() {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\nclass LLRBEmptyNode {\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @returns The node copy.\r\n   */\n  copy(key, value, color, left, right) {\n    return this;\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item added.\r\n   */\n  insert(key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item removed.\r\n   */\n  remove(key, comparator) {\n    return this;\n  }\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n  count() {\n    return 0;\n  }\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n  isEmpty() {\n    return true;\n  }\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  inorderTraversal(action) {\n    return false;\n  }\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return false;\n  }\n  minKey() {\n    return null;\n  }\n  maxKey() {\n    return null;\n  }\n  check_() {\n    return 0;\n  }\n  /**\r\n   * @returns Whether this node is red.\r\n   */\n  isRed_() {\n    return false;\n  }\n}\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\nclass SortedMap {\n  /**\r\n   * @param comparator_ - Key comparator.\r\n   * @param root_ - Optional root node for the map.\r\n   */\n  constructor(comparator_) {\n    let root_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SortedMap.EMPTY_NODE;\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @returns New map, with item added.\r\n   */\n  insert(key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @returns New map, with item removed.\r\n   */\n  remove(key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param key - The key to look up.\r\n   * @returns The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n  get(key) {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param key - The key to find the predecessor of\r\n   * @returns The predecessor key.\r\n   */\n  getPredecessorKey(key) {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  }\n  /**\r\n   * @returns True if the map is empty.\r\n   */\n  isEmpty() {\n    return this.root_.isEmpty();\n  }\n  /**\r\n   * @returns The total number of nodes in the map.\r\n   */\n  count() {\n    return this.root_.count();\n  }\n  /**\r\n   * @returns The minimum key in the map.\r\n   */\n  minKey() {\n    return this.root_.minKey();\n  }\n  /**\r\n   * @returns The maximum key in the map.\r\n   */\n  maxKey() {\n    return this.root_.maxKey();\n  }\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n  inorderTraversal(action) {\n    return this.root_.inorderTraversal(action);\n  }\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns True if the traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return this.root_.reverseTraversal(action);\n  }\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @returns The iterator.\r\n   */\n  getIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  }\n  getIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  }\n  getReverseIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  }\n  getReverseIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  }\n}\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet MAX_NODE$2;\nfunction setMaxNode$1(val) {\n  MAX_NODE$2 = val;\n}\nconst priorityHashText = function (priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\nconst validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\nclass LeafNode {\n  /**\r\n   * @param value_ - The value to store in this leaf node. The object type is\r\n   * possible in the event of a deferred value\r\n   * @param priorityNode_ - The priority of this node.\r\n   */\n  constructor(value_) {\n    let priorityNode_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n  static set __childrenNodeConstructor(val) {\n    __childrenNodeConstructor = val;\n  }\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n  /** @inheritDoc */\n  isLeafNode() {\n    return true;\n  }\n  /** @inheritDoc */\n  getPriority() {\n    return this.priorityNode_;\n  }\n  /** @inheritDoc */\n  updatePriority(newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n  /** @inheritDoc */\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  /** @inheritDoc */\n  getChild(path) {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild() {\n    return false;\n  }\n  /** @inheritDoc */\n  getPredecessorChildName(childName, childNode) {\n    return null;\n  }\n  /** @inheritDoc */\n  updateImmediateChild(childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  }\n  /** @inheritDoc */\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n    }\n  }\n  /** @inheritDoc */\n  isEmpty() {\n    return false;\n  }\n  /** @inheritDoc */\n  numChildren() {\n    return 0;\n  }\n  /** @inheritDoc */\n  forEachChild(index, action) {\n    return false;\n  }\n  val(exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n  /** @inheritDoc */\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @returns The value of the node.\r\n   */\n  getValue() {\n    return this.value_;\n  }\n  compareTo(other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  }\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   */\n  compareToLeafNode_(otherLeaf) {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex() {\n    return this;\n  }\n  isIndexed() {\n    return true;\n  }\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  }\n}\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\nfunction setNodeFromJSON(val) {\n  nodeFromJSON$1 = val;\n}\nfunction setMaxNode(val) {\n  MAX_NODE$1 = val;\n}\nclass PriorityIndex extends Index {\n  compare(a, b) {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node) {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  }\n  makePost(indexValue, name) {\n    const priorityNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.priority';\n  }\n}\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_2 = Math.log(2);\nclass Base12Num {\n  constructor(length) {\n    const logBase2 = num =>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parseInt(Math.log(num) / LOG_2, 10);\n    const bitMask = bits => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n  nextBitIsOne() {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  }\n}\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n  const buildBalancedTree = function (low, high) {\n    const length = high - low;\n    let namedNode;\n    let key;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt(length / 2, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n  const buildFrom12Array = function (base12) {\n    let node = null;\n    let root = null;\n    let index = childList.length;\n    const buildPennant = function (chunkSize, color) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n    const attachPennant = function (pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap(mapSortFn || cmp, root);\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet _defaultIndexMap;\nconst fallbackObject = {};\nclass IndexMap {\n  constructor(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n  /**\r\n   * The default IndexMap for nodes without a priority\r\n   */\n  static get Default() {\n    assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n    _defaultIndexMap = _defaultIndexMap || new IndexMap({\n      '.priority': fallbackObject\n    }, {\n      '.priority': PRIORITY_INDEX\n    });\n    return _defaultIndexMap;\n  }\n  get(indexKey) {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n  hasIndex(indexDefinition) {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n  addIndex(indexDefinition, existingChildren) {\n    assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = Object.assign({}, this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = Object.assign({}, this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n  addToIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\n      const index = safeGet(this.indexSet_, indexName);\n      assert(index, 'Missing index implementation for ' + indexName);\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          const childList = [];\n          const iter = existingChildren.getIterator(NamedNode.Wrap);\n          let next = iter.getNext();\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n            next = iter.getNext();\n          }\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        let newChildren = indexedChildren;\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n  removeFromIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, indexedChildren => {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nlet EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\nclass ChildrenNode {\n  /**\r\n   * @param children_ - List of children of this node..\r\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n   */\n  constructor(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n    if (this.children_.isEmpty()) {\n      assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n  static get EMPTY_NODE() {\n    return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n  }\n  /** @inheritDoc */\n  isLeafNode() {\n    return false;\n  }\n  /** @inheritDoc */\n  getPriority() {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n  /** @inheritDoc */\n  updatePriority(newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n  /** @inheritDoc */\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n  /** @inheritDoc */\n  getChild(path) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n  /** @inheritDoc */\n  hasChild(childName) {\n    return this.children_.get(childName) !== null;\n  }\n  /** @inheritDoc */\n  updateImmediateChild(childName, newChildNode) {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n      const newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n  /** @inheritDoc */\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n  /** @inheritDoc */\n  isEmpty() {\n    return this.children_.isEmpty();\n  }\n  /** @inheritDoc */\n  numChildren() {\n    return this.children_.count();\n  }\n  /** @inheritDoc */\n  val(exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n    const obj = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key] = obj[key];\n      }\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n  /** @inheritDoc */\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n  /** @inheritDoc */\n  getPredecessorChildName(childName, childNode, index) {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n  getFirstChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n  getFirstChild(indexDefinition) {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   */\n  getLastChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n  getLastChild(indexDefinition) {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(index, action) {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n  getIterator(indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n  getIteratorFrom(startPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  getReverseIterator(indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  }\n  getReverseIteratorFrom(endPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   */\n  resolveIndex_(indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\nclass MaxNode extends ChildrenNode {\n  constructor() {\n    super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n  }\n  compareTo(other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n  equals(other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n  getPriority() {\n    return this;\n  }\n  getImmediateChild(childName) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  isEmpty() {\n    return false;\n  }\n}\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\nfunction nodeFromJSON(json) {\n  let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n  assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority = childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n    const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n    }\n  } else {\n    let node = ChildrenNode.EMPTY_NODE;\n    each(json, (key, childData) => {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass PathIndex extends Index {\n  constructor(indexPath_) {\n    super();\n    this.indexPath_ = indexPath_;\n    assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n  }\n  extractChild(snap) {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a, b) {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  }\n  maxPost() {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString() {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ValueIndex extends Index {\n  compare(a, b) {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node) {\n    return true;\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  }\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.value';\n  }\n}\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction changeValue(snapshotNode) {\n  return {\n    type: \"value\" /* ChangeType.VALUE */,\n    snapshotNode\n  };\n}\nfunction changeChildAdded(childName, snapshotNode) {\n  return {\n    type: \"child_added\" /* ChangeType.CHILD_ADDED */,\n    snapshotNode,\n    childName\n  };\n}\nfunction changeChildRemoved(childName, snapshotNode) {\n  return {\n    type: \"child_removed\" /* ChangeType.CHILD_REMOVED */,\n    snapshotNode,\n    childName\n  };\n}\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n  return {\n    type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\nfunction changeChildMoved(childName, snapshotNode) {\n  return {\n    type: \"child_moved\" /* ChangeType.CHILD_MOVED */,\n    snapshotNode,\n    childName\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\nclass IndexedFilter {\n  constructor(index_) {\n    this.index_ = index_;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n        } else {\n          assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes() {\n    return false;\n  }\n  getIndexedFilter() {\n    return this;\n  }\n  getIndex() {\n    return this.index_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\nclass RangedFilter {\n  constructor(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  getStartPost() {\n    return this.startPost_;\n  }\n  getEndPost() {\n    return this.endPost_;\n  }\n  matches(node) {\n    const isWithinStart = this.startIsInclusive_ ? this.index_.compare(this.getStartPost(), node) <= 0 : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_ ? this.index_.compare(node, this.getEndPost()) <= 0 : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes() {\n    return true;\n  }\n  getIndexedFilter() {\n    return this.indexedFilter_;\n  }\n  getIndex() {\n    return this.index_;\n  }\n  static getStartPost_(params) {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n  static getEndPost_(params) {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\nclass LimitedFilter {\n  constructor(params) {\n    this.withinDirectionalStart = node => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n    this.withinDirectionalEnd = node => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n    this.withinStartPost = node => {\n      const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\n      return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n    };\n    this.withinEndPost = node => {\n      const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\n      return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n    };\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange = count < this.limit_ && this.withinDirectionalStart(next) && this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes() {\n    return true;\n  }\n  getIndexedFilter() {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex() {\n    return this.index_;\n  }\n  fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a, b) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n      const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n          }\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\nclass QueryParams {\n  constructor() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.startAfterSet_ = false; // can only be true if startSet_ is true\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.endBeforeSet_ = false; // can only be true if endSet_ is true\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n  hasStart() {\n    return this.startSet_;\n  }\n  /**\r\n   * @returns True if it would return from left.\r\n   */\n  isViewFromLeft() {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n    }\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   */\n  getIndexStartValue() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   */\n  getIndexStartName() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n  hasEnd() {\n    return this.endSet_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   */\n  getIndexEndValue() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   */\n  getIndexEndName() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n  hasLimit() {\n    return this.limitSet_;\n  }\n  /**\r\n   * @returns True if a limit has been set and it has been explicitly anchored\r\n   */\n  hasAnchoredLimit() {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   */\n  getLimit() {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n  getIndex() {\n    return this.index_;\n  }\n  loadsAllData() {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n  isDefault() {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n  copy() {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\nfunction queryParamsGetNodeFilter(queryParams) {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n  return newParams;\n}\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n  return newParams;\n}\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n  let params;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n  let params;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\nfunction queryParamsOrderBy(queryParams, index) {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n  const qs = {};\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_ ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */ : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_ ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */ : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\n    } else {\n      qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\n    }\n  }\n  return qs;\n}\nfunction queryParamsGetQueryObject(queryParams) {\n  const obj = {};\n  if (queryParams.startSet_) {\n    obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] = queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] = queryParams.indexStartName_;\n    }\n    obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] = !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\n    }\n    obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] = !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n      } else {\n        viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n      }\n    }\n\n    obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\n  }\n  return obj;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\nclass ReadonlyRestClient extends ServerActions {\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    /** @private {function(...[*])} */\n    this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     */\n    this.listens_ = {};\n  }\n  reportStats(stats) {\n    throw new Error('Method not implemented.');\n  }\n  static getListenId_(query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n      return query._path.toString();\n    }\n  }\n  /** @inheritDoc */\n  listen(query, currentHashFn, tag, onComplete) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        this.onDataUpdate_(pathString, data, /*isMerge=*/false, tag);\n      }\n      if (safeGet(this.listens_, listenId) === thisListen) {\n        let status;\n        if (!error) {\n          status = 'ok';\n        } else if (error === 401) {\n          status = 'permission_denied';\n        } else {\n          status = 'rest_error:' + error;\n        }\n        onComplete(status, null);\n      }\n    });\n  }\n  /** @inheritDoc */\n  unlisten(query, tag) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n  get(query) {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    const pathString = query._path.toString();\n    const deferred = new Deferred();\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        this.onDataUpdate_(pathString, data, /*isMerge=*/false, /*tag=*/null);\n        deferred.resolve(data);\n      } else {\n        deferred.reject(new Error(data));\n      }\n    });\n    return deferred.promise;\n  }\n  /** @inheritDoc */\n  refreshAuthToken(token) {\n    // no-op since we just always call getToken.\n  }\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   */\n  restRequest_(pathString) {\n    let queryStringParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let callback = arguments.length > 2 ? arguments[2] : undefined;\n    queryStringParameters['format'] = 'export';\n    return Promise.all([this.authTokenProvider_.getToken( /*forceRefresh=*/false), this.appCheckTokenProvider_.getToken( /*forceRefresh=*/false)]).then(_ref => {\n      let [authToken, appCheckToken] = _ref;\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n      const url = (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host + pathString + '?' + 'ns=' + this.repoInfo_.namespace + querystring(queryStringParameters);\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n      xhr.open('GET', url, /*asynchronous=*/true);\n      xhr.send();\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\nclass SnapshotHolder {\n  constructor() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n  getNode(path) {\n    return this.rootNode_.getChild(path);\n  }\n  updateSnapshot(path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newSparseSnapshotTree() {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\nclass StatsListener {\n  constructor(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n  get() {\n    const newStats = this.collection_.get();\n    const delta = Object.assign({}, newStats);\n    if (this.last_) {\n      each(this.last_, (stat, value) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n    return delta;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\nclass StatsReporter {\n  constructor(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    const timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n  reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats = {};\n    let haveStatsToReport = false;\n    each(stats, (stat, value) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n    // queue our next run.\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n *\r\n * @enum\r\n */\nvar OperationType;\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\nfunction newOperationSourceUser() {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServer() {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServerTaggedQuery(queryId) {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass AckUserWrite {\n  /**\r\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n   */\n  constructor( /** @inheritDoc */path, /** @inheritDoc */affectedTree, /** @inheritDoc */revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n    this.source = newOperationSourceUser();\n  }\n  operationForChild(childName) {\n    if (!pathIsEmpty(this.path)) {\n      assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ListenComplete {\n  constructor(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Overwrite {\n  constructor(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n    this.type = OperationType.OVERWRITE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Merge {\n  constructor( /** @inheritDoc */source, /** @inheritDoc */path, /** @inheritDoc */children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n    this.type = OperationType.MERGE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString() {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\nclass CacheNode {\n  constructor(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   */\n  isFullyInitialized() {\n    return this.fullyInitialized_;\n  }\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   */\n  isFiltered() {\n    return this.filtered_;\n  }\n  isCompleteForPath(path) {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n  isCompleteForChild(key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  }\n  getNode() {\n    return this.node_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\nclass EventGenerator {\n  constructor(query_) {\n    this.query_ = query_;\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n  const events = [];\n  const moves = [];\n  changes.forEach(change => {\n    if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\n  return events;\n}\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n  filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n      }\n    });\n  });\n}\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n    return change;\n  }\n}\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newViewCache(eventCache, serverCache) {\n  return {\n    eventCache,\n    serverCache\n  };\n}\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;\n}\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\nconst EmptyChildren = () => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\nclass ImmutableTree {\n  constructor(value) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EmptyChildren();\n    this.value = value;\n    this.children = children;\n  }\n  static fromObject(obj) {\n    let tree = new ImmutableTree(null);\n    each(obj, (childPath, childSnap) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n  /**\r\n   * True if the value is empty and there are no children\r\n   */\n  isEmpty() {\n    return this.value === null && this.children.isEmpty();\n  }\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param relativePath - The remainder of the path\r\n   * @param predicate - The predicate to satisfy to return a node\r\n   */\n  findRootMostMatchingPathAndValue(relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: newEmptyPath(),\n        value: this.value\n      };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   */\n  findRootMostValueAndPath(relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n  /**\r\n   * @returns The subtree at the given path\r\n   */\n  subtree(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param relativePath - Path to set value at.\r\n   * @param toSet - Value to set.\r\n   * @returns Resulting tree.\r\n   */\n  set(relativePath, toSet) {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param relativePath - Path to value to remove.\r\n   * @returns Resulting tree.\r\n   */\n  remove(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param relativePath - Path to get value for.\r\n   * @returns Value at path, or null.\r\n   */\n  get(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param relativePath - Path to replace subtree for.\r\n   * @param newTree - New tree.\r\n   * @returns Resulting tree.\r\n   */\n  setTree(relativePath, newTree) {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   */\n  fold(fn) {\n    return this.fold_(newEmptyPath(), fn);\n  }\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   */\n  fold_(pathSoFar, fn) {\n    const accum = {};\n    this.children.inorderTraversal((childKey, childTree) => {\n      accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  }\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   */\n  findOnPath(path, f) {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n  findOnPath_(pathToFollow, pathSoFar, f) {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow);\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  foreachOnPath(path, f) {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n  foreachOnPath_(pathToFollow, currentRelativePath, f) {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param f - A function to be called with the path from the root of the tree to\r\n   * a node, and the value at that node. Called in depth-first order.\r\n   */\n  foreach(f) {\n    this.foreach_(newEmptyPath(), f);\n  }\n  foreach_(currentRelativePath, f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n  foreachChild(f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\nclass CompoundWrite {\n  constructor(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n  static empty() {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n  let newWrite = compoundWrite;\n  each(updates, (childKey, node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n    return new CompoundWrite(newWriteTree);\n  }\n}\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n  const children = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n        children.push(new NamedNode(childName, childNode));\n      });\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value != null) {\n        children.push(new NamedNode(childName, childTree.value));\n      }\n    });\n  }\n  return children;\n}\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\nfunction compoundWriteIsEmpty(compoundWrite) {\n  return compoundWrite.writeTree_.isEmpty();\n}\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\nfunction compoundWriteApply(compoundWrite, node) {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\nfunction writeTreeChildWrites(writeTree, path) {\n  return newWriteTreeRef(path, writeTree);\n}\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n  }\n  writeTree.lastWriteId = writeId;\n}\n/**\r\n * Record a new merge from user code.\r\n */\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n  writeTree.lastWriteId = writeId;\n}\nfunction writeTreeGetWrite(writeTree, writeId) {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n  let i = writeTree.allWrites.length - 1;\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n    } else {\n      const children = writeToRemove.children;\n      each(children, childName => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n      });\n    }\n    return true;\n  }\n}\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\nfunction writeTreeResetTree_(writeTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\nfunction writeTreeDefaultFilter_(write) {\n  return write.visible;\n}\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n        } else ;\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n            }\n          }\n        } else ;\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n        return null;\n      } else {\n        const filter = function (write) {\n          return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));\n        };\n        const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n  let completeChildren = ChildrenNode.EMPTY_NODE;\n  const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n      completeChildren = completeChildren.updateImmediateChild(childName, node);\n    });\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  }\n}\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n  assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n    }\n  }\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n    } else {\n      return null;\n    }\n  }\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\nfunction writeTreeShadowingWrite(writeTree, path) {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n  let toIterate;\n  const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\nfunction newWriteTree() {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\nfunction writeTreeRefChild(writeTreeRef, childName) {\n  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\nfunction newWriteTreeRef(path, writeTree) {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ChildChangeAccumulator {\n  constructor() {\n    this.changeMap = new Map();\n  }\n  trackChildChange(change) {\n    const type = change.type;\n    const childKey = change.childName;\n    assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ || type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ || type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\n    assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ && oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ && oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n        this.changeMap.delete(childKey);\n      } else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ && oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n      } else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ && oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n        this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n      } else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ && oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n  getChanges() {\n    return Array.from(this.changeMap.values());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass NoCompleteChildSource_ {\n  getCompleteChild(childKey) {\n    return null;\n  }\n  getChildAfterChild(index, child, reverse) {\n    return null;\n  }\n}\n/**\r\n * Singleton instance.\r\n */\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\nclass WriteTreeCompleteChildSource {\n  constructor(writes_, viewCache_) {\n    let optCompleteServerCache_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n  getCompleteChild(childKey) {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(index, child, reverse) {\n    const completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newViewProcessor(filter) {\n  return {\n    filter\n  };\n}\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n  assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n  assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);\n      newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return {\n    viewCache: newViewCache,\n    changes\n  };\n}\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n    }\n  }\n}\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n  }\n}\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n    } else {\n      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n  const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n      newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {\n    return viewCache;\n  }\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n      }\n    });\n    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n  }\n}\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n      }\n      newNode = newNode;\n      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n        }\n      }\n    }\n    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\nclass View {\n  constructor(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    const params = this.query_._queryParams;\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n    this.processor_ = newViewProcessor(filter);\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n  get query() {\n    return this.query_;\n  }\n}\nfunction viewGetServerCache(view) {\n  return view.viewCache_.serverCache.getNode();\n}\nfunction viewGetCompleteNode(view) {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\nfunction viewGetCompleteServerCache(view, path) {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\nfunction viewIsEmpty(view) {\n  return view.eventRegistrations_.length === 0;\n}\nfunction viewAddEventRegistration(view, eventRegistration) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n  const cancelEvents = [];\n  if (cancelError) {\n    assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n    assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n    assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n  }\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n  assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n  view.viewCache_ = result.viewCache;\n  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\nfunction viewGetInitialEvents(view, registration) {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode();\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n  const registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\nclass SyncPoint {\n  constructor() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n}\nfunction syncPointSetReferenceConstructor(val) {\n  assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n  referenceConstructor$1 = val;\n}\nfunction syncPointGetReferenceConstructor() {\n  assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n  return referenceConstructor$1;\n}\nfunction syncPointIsEmpty(syncPoint) {\n  return syncPoint.views.size === 0;\n}\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n  } else {\n    let events = [];\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n    }\n    return events;\n  }\n}\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n    return new View(query, viewCache);\n  }\n  return view;\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n  const queryId = query._queryIdentifier;\n  const removed = [];\n  let cancelEvents = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n  }\n  return {\n    removed,\n    events: cancelEvents\n  };\n}\nfunction syncPointGetQueryViews(syncPoint) {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n  let serverCache = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\nfunction syncPointViewForQuery(syncPoint, query) {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\nfunction syncPointHasCompleteView(syncPoint) {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\nfunction syncPointGetCompleteView(syncPoint) {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet referenceConstructor;\nfunction syncTreeSetReferenceConstructor(val) {\n  assert(!referenceConstructor, '__referenceConstructor has already been defined');\n  referenceConstructor = val;\n}\nfunction syncTreeGetReferenceConstructor() {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n/**\r\n * Static tracker for next query tag.\r\n */\nlet syncTreeNextQueryTag_ = 1;\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\nclass SyncTree {\n  /**\r\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  constructor(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n    this.syncPointTree_ = new ImmutableTree(null);\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n    this.pendingWriteTree_ = newWriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n}\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n  // Record pending write.\n  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n  }\n}\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\nfunction syncTreeAckUserWrite(syncTree, writeId) {\n  let revert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, pathString => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n  }\n}\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyListenComplete(syncTree, path) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\n  let skipListenerDedup = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n    const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    if (!skipListenerDedup) {\n      /**\r\n       * We may have just removed one of many listeners and can short-circuit this whole process\r\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n       * properly set up.\r\n       */\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault = -1 !== removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n      const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag = null;\n          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(queryToRemove => {\n            const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  }\n  return cancelEvents;\n}\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\n  let skipSetupListener = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const path = query._path;\n  let serverCache = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(childName, completeCache);\n      }\n    });\n  }\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n    const relativePath = newRelativePath(pathSoFar, path);\n    const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n    if (serverCache) {\n      return serverCache;\n    }\n  });\n  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\nfunction syncTreeGetServerValue(syncTree, query) {\n  const path = query._path;\n  let serverCache = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n  return viewGetCompleteNode(view);\n}\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, /*serverCache=*/null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let events = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n    if (syncPoint) {\n      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n    return events;\n  }\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  let events = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n  });\n  if (syncPoint) {\n    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n  }\n  return events;\n}\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: status => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(syncTree, query, /*eventRegistration*/null, error);\n      }\n    }\n  };\n}\n/**\r\n * Return the tag associated with the given query.\r\n */\nfunction syncTreeTagForQuery(syncTree, query) {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\nfunction syncTreeMakeQueryKey_(query) {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n  return syncTree.tagToQueryMap.get(tag);\n}\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\nfunction syncTreeParseQueryKey_(queryKey) {\n  const splitIndex = queryKey.indexOf('$');\n  assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n/**\r\n * A helper method to apply tagged operations\r\n */\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n  return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key, childViews) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\nfunction syncTreeQueryForListening_(query) {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\nfunction syncTreeRemoveTags_(syncTree, queries) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n/**\r\n * Static accessor for query tags.\r\n */\nfunction syncTreeGetNextQueryTag_() {\n  return syncTreeNextQueryTag_++;\n}\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\nfunction syncTreeSetupListener_(syncTree, query, view) {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n  const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n        return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n      } else {\n        // No default listener here, flatten any deeper queries into an array\n        let queries = [];\n        if (maybeChildSyncPoint) {\n          queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n        }\n        each(childMap, (_key, childQueries) => {\n          queries = queries.concat(childQueries);\n        });\n        return queries;\n      }\n    });\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\n    }\n  }\n  return events;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ExistingValueProvider {\n  constructor(node_) {\n    this.node_ = node_;\n  }\n  getImmediateChild(childName) {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n  node() {\n    return this.node_;\n  }\n}\nclass DeferredValueProvider {\n  constructor(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n  getImmediateChild(childName) {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n  node() {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n/**\r\n * Generate placeholders for deferred values.\r\n */\nconst generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n  const existingNode = existing.node();\n  assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n  const leaf = existingNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  const rawPri = node.getPriority().val();\n  const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  let newNode;\n  if (node.isLeafNode()) {\n    const leafNode = node;\n    const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\nclass Tree {\n  /**\r\n   * @param name - Optional name of the node.\r\n   * @param parent - Optional parent node.\r\n   * @param node - Optional node to wrap.\r\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      children: {},\n      childCount: 0\n    };\n    this.name = name;\n    this.parent = parent;\n    this.node = node;\n  }\n}\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\nfunction treeSubTree(tree, pathObj) {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n  return child;\n}\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\nfunction treeGetValue(tree) {\n  return tree.node.value;\n}\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\nfunction treeSetValue(tree, value) {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n/**\r\n * @returns Whether the tree has any children.\r\n */\nfunction treeHasChildren(tree) {\n  return tree.node.childCount > 0;\n}\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\nfunction treeIsEmpty(tree) {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\nfunction treeForEachChild(tree, action) {\n  each(tree.node.children, (child, childTree) => {\n    action(new Tree(child, tree, childTree));\n  });\n}\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\nfunction treeForEachAncestor(tree, action, includeSelf) {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\nfunction treeGetPath(tree) {\n  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\nfunction treeUpdateParents(tree) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\nfunction treeUpdateChild(tree, childName, child) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * True for invalid Firebase keys\r\n */\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\nconst isValidKey = function (key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\nconst isValidPathString = function (pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\nconst isValidRootPathString = function (pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  return isValidPathString(pathString);\n};\nconst isValidPriority = function (priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' &&\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n  if (optional && value === undefined) {\n    return;\n  }\n  validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n  const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n  }\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));\n  }\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + \" ('\" + data.substring(0, 50) + \"...')\");\n  }\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key, value) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n    if (hasDotValue && hasActualChild) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + validationPathToErrorString(path) + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  }\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n  const errorPrefix$1 = errorPrefix(fnName, 'values');\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n  }\n  const mergePaths = [];\n  each(data, (key, value) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix$1 + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\nconst validatePriority = function (fnName, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\nconst validateKey = function (fnName, argumentName, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n/**\r\n * @internal\r\n */\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n  if (!isValidPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\r\n * @internal\r\n */\nconst validateWritablePath = function (fnName, path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\nconst validateUrl = function (fnName, parsedUrl) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\nclass EventQueue {\n  constructor() {\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     */\n    this.recursionDepth_ = 0;\n  }\n}\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n    if (currList === null) {\n      currList = {\n        events: [],\n        path\n      };\n    }\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath));\n}\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n  eventQueue.recursionDepth_++;\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n  eventQueue.recursionDepth_--;\n}\n/**\r\n * Iterates through the list and raises each event\r\n */\nfunction eventListRaise(eventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\r\n * A connection to a single data repository.\r\n */\nclass Repo {\n  constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n    this.repoInfo_ = repoInfo_;\n    this.forceRestClient_ = forceRestClient_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckProvider_ = appCheckProvider_;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n    this.onDisconnect_ = newSparseSnapshotTree();\n    /** Stores queues of outstanding transactions for Firebase locations. */\n    this.transactionQueueTree_ = new Tree();\n    // TODO: This should be @private but it's used by test_access.js and internal.js\n    this.persistentConnection_ = null;\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n  /**\r\n   * @returns The URL corresponding to the root of this Firebase.\r\n   */\n  toString() {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  }\n}\nfunction repoStart(repo, appId, authOverride) {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, repo.authTokenProvider_, repo.appCheckProvider_);\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, connectStatus => {\n      repoOnConnectStatus(repo, connectStatus);\n    }, updates => {\n      repoOnServerInfoUpdate(repo, updates);\n    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n    repo.server_ = repo.persistentConnection_;\n  }\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\nfunction repoServerTime(repo) {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = offsetNode.val() || 0;\n  return new Date().getTime() + offset;\n}\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\nfunction repoGenerateServerValues(repo) {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(data, raw => nodeFromJSON(raw));\n      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n    }\n  } else if (isMerge) {\n    const changedChildren = map(data, raw => nodeFromJSON(raw));\n    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\nfunction repoOnConnectStatus(repo, connectStatus) {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\nfunction repoOnServerInfoUpdate(repo, updates) {\n  each(updates, (key, value) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\nfunction repoUpdateInfo(repo, pathString, value) {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\nfunction repoGetNextWriteId(repo) {\n  return repo.nextWriteId_++;\n}\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\nfunction repoGetValue(repo, query, eventRegistration) {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(payload => {\n    const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n    /**\r\n     * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n     * Add an event registration,\r\n     * Update data at the path,\r\n     * Raise any events,\r\n     * Cleanup the SyncTree\r\n     */\n    syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\n    let events;\n    if (query._queryParams.loadsAllData()) {\n      events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n    } else {\n      const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\n    }\n    /*\r\n     * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n     * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n     * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n     * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n     * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n     * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n     * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n     * ensure the corresponding child events will get fired.\r\n     */\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n    syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\n    return node;\n  }, err => {\n    repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n    return Promise.reject(new Error(err));\n  });\n}\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(path.toString(), newNodeUnresolved.val( /*export=*/true), (status, errorReason) => {\n    const success = status === 'ok';\n    if (!success) {\n      warn('set at ' + path + ' failed: ' + status);\n    }\n    const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n  repoLog(repo, 'update', {\n    path: path.toString(),\n    value: childrenToMerge\n  });\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren = {};\n  each(childrenToMerge, (changedKey, changedValue) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n  });\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('update at ' + path + ' failed: ' + status);\n      }\n      const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n      const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    each(childrenToMerge, changedPath => {\n      const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n      repoRerunTransactions(repo, affectedPath);\n    });\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\nfunction repoRunOnDisconnectEvents(repo) {\n  repoLog(repo, 'onDisconnectEvents');\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n    const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n  });\n  let events = [];\n  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n  });\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n    if (status === 'ok') {\n      each(childrenToMerge, (childName, childNode) => {\n        const newChildNode = nodeFromJSON(childNode);\n        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n      });\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoInterrupt(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\nfunction repoResume(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\nfunction repoLog(repo) {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  for (var _len6 = arguments.length, varArgs = new Array(_len6 > 1 ? _len6 - 1 : 0), _key7 = 1; _key7 < _len6; _key7++) {\n    varArgs[_key7 - 1] = arguments[_key7];\n  }\n  log(prefix, ...varArgs);\n}\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n        const error = new Error(message);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        error.code = code;\n        callback(error);\n      }\n    });\n  }\n}\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n  repoLog(repo, 'transaction on ' + path);\n  // Initialize transaction.\n  const transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n    // Mark as run and add to our queue.\n    transaction.status = 0 /* TransactionStatus.RUN */;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n    treeSetValue(queueNode, nodeQueue);\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (typeof newVal === 'object' && newVal !== null && contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\nfunction repoGetLatestState(repo, path, excludeSets) {\n  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;\n}\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\nfunction repoSendReadyTransactions(repo) {\n  let node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : repo.transactionQueueTree_;\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n    const allRun = queue.every(transaction => transaction.status === 0 /* TransactionStatus.RUN */);\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\nfunction repoSendTransactionQueue(repo, path, queue) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = 1 /* TransactionStatus.SENT */;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\n  }\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n  // Send the put.\n  repo.server_.put(pathToSend.toString(), dataToSend, status => {\n    repoLog(repo, 'transaction put response', {\n      path: pathToSend.toString(),\n      status\n    });\n    let events = [];\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our\n      // transaction state, since the callback could trigger more\n      // transactions or sets.\n      const callbacks = [];\n      for (let i = 0; i < queue.length; i++) {\n        queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this\n          // transaction is complete, it should be set\n          callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n        }\n        queue[i].unwatcher();\n      }\n      // Now remove the completed transactions.\n      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\n      // There may be pending transactions that we can now send.\n      repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n      // Finally, trigger onComplete callbacks.\n      for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (let i = 0; i < queue.length; i++) {\n          if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\n            queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n          } else {\n            queue[i].status = 0 /* TransactionStatus.RUN */;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n          queue[i].abortReason = status;\n        }\n      }\n      repoRerunTransactions(repo, path);\n    }\n  }, latestHash);\n}\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\nfunction repoRerunTransactions(repo, changedPath) {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n  const path = treeGetPath(rootMostTransactionNode);\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n  return path;\n}\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\nfunction repoRerunTransactionQueue(repo, queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === 0 /* TransactionStatus.RUN */;\n  });\n\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n    if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n    } else if (transaction.status === 0 /* TransactionStatus.RUN */) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority = typeof newData === 'object' && newData != null && contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n        } else {\n          callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n        }\n      }\n    }\n  }\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\nfunction repoGetAncestorTransactionNode(repo, path) {\n  let front;\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n  return transactionNode;\n}\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue = [];\n  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n  return transactionQueue;\n}\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\nfunction repoAbortTransactions(repo, path) {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n  treeForEachAncestor(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  repoAbortTransactionsOnNode(repo, transactionNode);\n  treeForEachDescendant(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  return affectedPath;\n}\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\nfunction repoAbortTransactionsOnNode(repo, node) {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\n        assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n        if (queue[i].onComplete) {\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction decodePath(pathString) {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n/**\r\n * @returns key value hash\r\n */\nfunction decodeQuery(queryString) {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  }\n  // Catch common error of uninitialized namespace value.\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, /*persistenceKey=*/'', /*includeNamespaceInQueryParams=*/namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\nconst parseDatabaseURL = function (dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\nconst nextPushId = function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars = [];\n  return function (now) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n    let id = timeStampChars.join('');\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\nclass DataEvent {\n  /**\r\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param eventRegistration - The function to call to with the event data. User provided\r\n   * @param snapshot - The data backing the event\r\n   * @param prevName - Optional, the name of the previous child for child_* events.\r\n   */\n  constructor(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n  getPath() {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType() {\n    return this.eventType;\n  }\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString() {\n    return this.getPath().toString() + ':' + this.eventType + ':' + stringify(this.snapshot.exportVal());\n  }\n}\nclass CancelEvent {\n  constructor(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n  getPath() {\n    return this.path;\n  }\n  getEventType() {\n    return 'cancel';\n  }\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString() {\n    return this.path.toString() + ':cancel';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\nclass CallbackContext {\n  constructor(snapshotCallback, cancelCallback) {\n    this.snapshotCallback = snapshotCallback;\n    this.cancelCallback = cancelCallback;\n  }\n  onValue(expDataSnapshot, previousChildName) {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n  onCancel(error) {\n    assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n    return this.cancelCallback.call(null, error);\n  }\n  get hasCancelCallback() {\n    return !!this.cancelCallback;\n  }\n  matches(other) {\n    return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\nclass OnDisconnect {\n  /** @hideconstructor */\n  constructor(_repo, _path) {\n    this._repo = _repo;\n    this._path = _path;\n  }\n  /**\r\n   * Cancels all previously queued `onDisconnect()` set or update events for this\r\n   * location and all children.\r\n   *\r\n   * If a write has been queued for this location via a `set()` or `update()` at a\r\n   * parent location, the write at this location will be canceled, though writes\r\n   * to sibling locations will still occur.\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n  cancel() {\n    const deferred = new Deferred();\n    repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is deleted when the client is disconnected\r\n   * (due to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n  remove() {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value when the\r\n   * client is disconnected (due to closing the browser, navigating to a new page,\r\n   * or network issues).\r\n   *\r\n   * `set()` is especially useful for implementing \"presence\" systems, where a\r\n   * value should be changed or cleared when a user disconnects so that they\r\n   * appear \"offline\" to other users. See\r\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n   * for more information.\r\n   *\r\n   * Note that `onDisconnect` operations are only triggered once. If you want an\r\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n   * the `onDisconnect` operations each time.\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  set(value) {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value and priority\r\n   * when the client is disconnected (due to closing the browser, navigating to a\r\n   * new page, or network issues).\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @param priority - The priority to be written (string, number, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  setWithPriority(value, priority) {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Writes multiple values at this location when the client is disconnected (due\r\n   * to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * The `values` argument contains multiple property-value pairs that will be\r\n   * written to the Database together. Each child property can either be a simple\r\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n   * from the current location to the data to update.\r\n   *\r\n   * As opposed to the `set()` method, `update()` can be use to selectively update\r\n   * only the referenced properties at the current location (instead of replacing\r\n   * all the child properties at the current location).\r\n   *\r\n   * @param values - Object containing multiple values.\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  update(values) {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @internal\r\n */\nclass QueryImpl {\n  /**\r\n   * @hideconstructor\r\n   */\n  constructor(_repo, _path, _queryParams, _orderByCalled) {\n    this._repo = _repo;\n    this._path = _path;\n    this._queryParams = _queryParams;\n    this._orderByCalled = _orderByCalled;\n  }\n  get key() {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n  get ref() {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n  get _queryIdentifier() {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n  /**\r\n   * An object representation of the query parameters used by this Query.\r\n   */\n  get _queryObject() {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n  isEqual(other) {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n  toJSON() {\n    return this.toString();\n  }\n  toString() {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n/**\r\n * Validates that no other order by call has been made\r\n */\nfunction validateNoPreviousOrderByCall(query, fnName) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n/**\r\n * Validates start/end values for queries.\r\n */\nfunction validateQueryEndpoints(params) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' + 'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n      throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' + '(null, a number, or a string).');\n    }\n  } else {\n    assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n    if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n      throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' + 'equalTo() cannot be an object.');\n    }\n  }\n}\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\nfunction validateLimit(params) {\n  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n    throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" + 'limitToFirst() or limitToLast() instead.');\n  }\n}\n/**\r\n * @internal\r\n */\nclass ReferenceImpl extends QueryImpl {\n  /** @hideconstructor */\n  constructor(repo, path) {\n    super(repo, path, new QueryParams(), false);\n  }\n  get parent() {\n    const parentPath = pathParent(this._path);\n    return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);\n  }\n  get root() {\n    let ref = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\nclass DataSnapshot {\n  /**\r\n   * @param _node - A SnapshotNode to wrap.\r\n   * @param ref - The location this snapshot came from.\r\n   * @param _index - The iteration order for this snapshot\r\n   * @hideconstructor\r\n   */\n  constructor(_node,\n  /**\r\n   * The location of this DataSnapshot.\r\n   */\n  ref, _index) {\n    this._node = _node;\n    this.ref = ref;\n    this._index = _index;\n  }\n  /**\r\n   * Gets the priority value of the data in this `DataSnapshot`.\r\n   *\r\n   * Applications need not use priority but can order collections by\r\n   * ordinary properties (see\r\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n   * ).\r\n   */\n  get priority() {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val();\n  }\n  /**\r\n   * The key (last part of the path) of the location of this `DataSnapshot`.\r\n   *\r\n   * The last token in a Database location is considered its key. For example,\r\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n   * `DataSnapshot` will return the key for the location that generated it.\r\n   * However, accessing the key on the root URL of a Database will return\r\n   * `null`.\r\n   */\n  get key() {\n    return this.ref.key;\n  }\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size() {\n    return this._node.numChildren();\n  }\n  /**\r\n   * Gets another `DataSnapshot` for the location at the specified relative path.\r\n   *\r\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n   * another `DataSnapshot` for the location at the specified relative path. The\r\n   * relative path can either be a simple child name (for example, \"ada\") or a\r\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n   * whose value is `null`) is returned.\r\n   *\r\n   * @param path - A relative path to the location of child data.\r\n   */\n  child(path) {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n  }\n  /**\r\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n   * efficient than using `snapshot.val() !== null`.\r\n   */\n  exists() {\n    return !this._node.isEmpty();\n  }\n  /**\r\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n   *\r\n   * The `exportVal()` method is similar to `val()`, except priority information\r\n   * is included (if available), making it suitable for backing up your data.\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal() {\n    return this._node.val(true);\n  }\n  /**\r\n   * Enumerates the top-level children in the `DataSnapshot`.\r\n   *\r\n   * Because of the way JavaScript objects work, the ordering of data in the\r\n   * JavaScript object returned by `val()` is not guaranteed to match the\r\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n   * where `forEach()` comes in handy. It guarantees the children of a\r\n   * `DataSnapshot` will be iterated in their query order.\r\n   *\r\n   * If no explicit `orderBy*()` method is used, results are returned\r\n   * ordered by key (unless priorities are used, in which case, results are\r\n   * returned by priority).\r\n   *\r\n   * @param action - A function that will be called for each child DataSnapshot.\r\n   * The callback can return true to cancel further enumeration.\r\n   * @returns true if enumeration was canceled due to your callback returning\r\n   * true.\r\n   */\n  forEach(action) {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n    const childrenNode = this._node;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n    });\n  }\n  /**\r\n   * Returns true if the specified child path has (non-null) data.\r\n   *\r\n   * @param path - A relative path to the location of a potential child.\r\n   * @returns `true` if data exists at the specified child path; else\r\n   *  `false`.\r\n   */\n  hasChild(path) {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n  /**\r\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n   * properties.\r\n   *\r\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n   * children. If it does, you can enumerate them using `forEach()`. If it\r\n   * doesn't, then either this snapshot contains a primitive value (which can be\r\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n   * `null`).\r\n   *\r\n   * @returns true if this snapshot has any children; else false.\r\n   */\n  hasChildren() {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n  /**\r\n   * Returns a JSON-serializable representation of this object.\r\n   */\n  toJSON() {\n    return this.exportVal();\n  }\n  /**\r\n   * Extracts a JavaScript value from a `DataSnapshot`.\r\n   *\r\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n   * scalar type (string, number, or boolean), an array, or an object. It may\r\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n   * data).\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val() {\n    return this._node.val();\n  }\n}\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\nfunction ref(db, path) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\nfunction refFromURL(db, url) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n  const repoInfo = parsedURL.repoInfo;\n  if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {\n    fatal('refFromURL' + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');\n  }\n  return ref(db, parsedURL.path.toString());\n}\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\nfunction child(parent, path) {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\nfunction onDisconnect(ref) {\n  ref = getModularInstance(ref);\n  return new OnDisconnect(ref._repo, ref._path);\n}\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\nfunction push(parent, value) {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef = child(parent, name);\n  const pushRef = child(parent, name);\n  let promise;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef;\n}\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\nfunction remove(ref) {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction set(ref, value) {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, /*priority=*/null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction setPriority(ref, priority) {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction setWithPriority(ref, value, priority) {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\nfunction update(ref, values) {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred();\n  repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\nfunction get(query) {\n  query = getModularInstance(query);\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n  });\n}\n/**\r\n * Represents registration for 'value' events.\r\n */\nclass ValueEventRegistration {\n  constructor(callbackContext) {\n    this.callbackContext = callbackContext;\n  }\n  respondsTo(eventType) {\n    return eventType === 'value';\n  }\n  createEvent(change, query) {\n    const index = query._queryParams.getIndex();\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n  }\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, null);\n    }\n  }\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n  matches(other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n  hasAnyCallback() {\n    return this.callbackContext !== null;\n  }\n}\n/**\r\n * Represents the registration of a child_x event.\r\n */\nclass ChildEventRegistration {\n  constructor(eventType, callbackContext) {\n    this.eventType = eventType;\n    this.callbackContext = callbackContext;\n  }\n  respondsTo(eventType) {\n    let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n  createEvent(change, query) {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n    const index = query._queryParams.getIndex();\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n  }\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n    }\n  }\n  matches(other) {\n    if (other instanceof ChildEventRegistration) {\n      return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));\n    }\n    return false;\n  }\n  hasAnyCallback() {\n    return !!this.callbackContext;\n  }\n}\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n  let cancelCallback;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n  const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n  const container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\nfunction off(query, eventType, callback) {\n  let container = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\nclass QueryConstraint {}\nclass QueryEndAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endAt: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\nfunction endAt(value, key) {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endBefore: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\nfunction endBefore(value, key) {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\nclass QueryStartAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAt: Starting point was already set (by another call to startAt, ' + 'startBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\nfunction startAt() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let key = arguments.length > 1 ? arguments[1] : undefined;\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\nclass QueryStartAfterConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAfter: Starting point was already set (by another call to startAt, ' + 'startAfter, or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\nfunction startAfter(value, key) {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\nfunction limitToFirst(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\nfunction limitToLast(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n  return new QueryLimitToLastConstraint(limit);\n}\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  constructor(_path) {\n    super();\n    this._path = _path;\n  }\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\nfunction orderByChild(path) {\n  if (path === '$key') {\n    throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n  } else if (path === '$priority') {\n    throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n  } else if (path === '$value') {\n    throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\nfunction orderByKey() {\n  return new QueryOrderByKeyConstraint();\n}\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\nfunction orderByPriority() {\n  return new QueryOrderByPriorityConstraint();\n}\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\nfunction orderByValue() {\n  return new QueryOrderByValueConstraint();\n}\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' + 'equalTo).');\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' + 'equalTo).');\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n  }\n}\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\nfunction equalTo(value, key) {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\nfunction query(query) {\n  let queryImpl = getModularInstance(query);\n  for (var _len7 = arguments.length, queryConstraints = new Array(_len7 > 1 ? _len7 - 1 : 0), _key8 = 1; _key8 < _len7; _key8++) {\n    queryConstraints[_key8 - 1] = arguments[_key8];\n  }\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\r\n * Creates and caches `Repo` instances.\r\n */\nconst repos = {};\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\nlet useRestClient = false;\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n  repo.repoInfo_ = new RepoInfo(`${host}:${port}`, /* secure= */false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, /*isUsingEmulator=*/true);\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n  let dbUrl = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n    }\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n  let isEmulator;\n  let dbEmulatorHost = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n  const authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n  }\n  const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n  return new Database(repo, app);\n}\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\nfunction repoManagerDeleteRepo(repo, appName) {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n  let appRepos = repos[app.name];\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n  return repo;\n}\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\nfunction repoManagerForceRestClient(forceRestClient) {\n  useRestClient = forceRestClient;\n}\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\nclass Database {\n  /** @hideconstructor */\n  constructor(_repoInternal, /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n  app) {\n    this._repoInternal = _repoInternal;\n    this.app = app;\n    /** Represents a `Database` instance. */\n    this['type'] = 'database';\n    /** Track if the instance has been used (root or repo accessed) */\n    this._instanceStarted = false;\n  }\n  get _repo() {\n    if (!this._instanceStarted) {\n      repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n  get _root() {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n  _delete() {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n  _checkNotDeleted(apiName) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\n  }\n}\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\nfunction forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\nfunction forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\nfunction getDatabase() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let url = arguments.length > 1 ? arguments[1] : undefined;\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  });\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\nfunction connectDatabaseEmulator(db, host, port) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal('Cannot call useEmulator() after instance has already been initialized.');\n  }\n  const repo = db._repoInternal;\n  let tokenProvider = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token = typeof options.mockUserToken === 'string' ? options.mockUserToken : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\nfunction goOffline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\nfunction goOnline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\nfunction enableLogging(logger, persistent) {\n  enableLogging$1(logger, persistent);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerDatabase(variant) {\n  setSDKVersion(SDK_VERSION$1);\n  _registerComponent(new Component('database', (container, _ref2) => {\n    let {\n      instanceIdentifier: url\n    } = _ref2;\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\nfunction serverTimestamp() {\n  return SERVER_TIMESTAMP;\n}\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\nfunction increment(delta) {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\nclass TransactionResult {\n  /** @hideconstructor */\n  constructor( /** Whether the transaction was successfully committed. */\n  committed, /** The resulting data snapshot. */\n  snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON() {\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  }\n}\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\nfunction runTransaction(ref,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n  var _a;\n  ref = getModularInstance(ref);\n  validateWritablePath('Reference.transaction', ref._path);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';\n  }\n  const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n  const deferred = new Deferred();\n  const promiseComplete = (error, committed, node) => {\n    let dataSnapshot = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n  repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n  return deferred.promise;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nPersistentConnection;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nConnection;\n/**\r\n * @internal\r\n */\nconst hijackHash = function (newHash) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\nRepoInfo;\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\nconst forceRestClient = function (forceRestClient) {\n  repoManagerForceRestClient(forceRestClient);\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\nregisterDatabase();\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };","map":{"version":3,"mappings":"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","names":["SDK_VERSION","setSDKVersion","version","DOMStorageWrapper","constructor","domStorage_","set","key","value","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","prefix_","toString","MemoryStorage","cache_","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","message","i","arguments","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","varArgs","logWrapper","prefix","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appCheckProvider","appName_","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","reject","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","incrementCounter","amount","counters_","deepCopy","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","closeAfter","responseNum","callback","closeAfterResponse","onClose","currentResponseNum","handleResponse","requestNum","pendingResponses","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","_this","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","bytesSent","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","bytesReceived","commandCB","onMessageCB","Set","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","outstandingRequests","size","pendingSegs","currentSerial","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","connectionURL_","options","device","headers","platform","env","process","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","isInMemoryStorage","appendFrame_","frames","totalFrames","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","keepaliveTimer","clearInterval","setInterval","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","connectionCount","everConnected","onConnectionLost_","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","pendingDataMessages","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","handshakePayload","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","token","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","trigger","eventType","listeners_","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","isMobileCordova","online_","getInstance","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pieceNum","pieces_","pathOrString","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","Map","onVisible_","onOnline_","action","onResponse","curReqNum","requestNumber_","r","connected_","realtime_","requestCBHash_","initConnection_","deferred","Deferred","request","p","q","_queryObject","outstandingGet","outstandingGets_","outstandingGetCount_","index","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","listens","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","maxReconnectDelay_","tryAppCheck","authMethod","isValidFormat","requestData","cred","res","invalidAuthTokenCount_","onAuthRevoked_","invalidAppCheckTokenCount_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","response","putInternal","undefined","outstandingPuts_","outstandingPutCount_","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","Date","getTime","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnectionTimer_","establishConnection_","reconnectDelay_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","forceTokenRefresh_","all","interrupt","interruptReasons_","resume","isEmpty","delta","serverTimeOffset","map","normalizedPathString","statusCode","explanation","securityDebugCallback_","console","replace","queries","values","clientName","isReactNative","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE","setMaxNode","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","LeafNode","value_","priorityNode_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","lazyHash_","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","nodeFromJSON","setNodeFromJSON","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexSet_","indexes_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","next","newIndex","indexName","newIndexSet","Object","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","setPriorityMaxNode","USE_HINZE","json","jsonLeaf","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","childData","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","source","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","reverse_","withinEndPost","withinStartPost","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","withinDirectionalStart","withinDirectionalEnd","inRange","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","startSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","hasLimit","limitSet_","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","getListenId_","listenId","thisListen","listens_","queryStringParameters","restRequest_","_ref","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","getNode","rootNode_","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForget","tree","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","forEach","StatsListener","collection_","newStats","last_","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","server_","statsListener_","collection","reportStats_","reportedStats","haveStatsToReport","statsToReport_","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","layeredCache","mergeAtPath","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","oldChange","changeMap","oldType","getChanges","from","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorAckUserWrite","viewProcessorRevertUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteNode","viewGetCompleteServerCache","cache","viewIsEmpty","eventRegistrations_","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor","SyncPoint","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","views","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncTreeApplyUserOverwrite","syncTree","newData","pendingWriteTree_","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","syncPointTree_","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","queryToTagMap","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","tagToQueryMap","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeGetServerValue","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefixFxn","errorPrefix","hasDotValue","hasActualChild","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","validatePriority","validateKey","argumentName","validateRootPathString","validatePathString","validateUrl","parsedUrl","EventQueue","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventLists_","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","recursionDepth_","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","persistentConnection_","connectStatus","repoOnServerInfoUpdate","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","eventQueue_","repoServerTime","offsetNode","offset","repoGenerateServerValues","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","nextWriteId_","repoGetValue","cached","err","repoLog","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","repoOnDisconnectSet","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","repoStartTransaction","transactionUpdate","unwatcher","applyLocally","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","transactionQueueTree_","nodeQueue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","charAt","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","cancelCallback","snapshotCallback","onValue","expDataSnapshot","previousChildName","call","onCancel","hasCancelCallback","userCallback","OnDisconnect","cancel","wrapCallback","validateWritablePath","setWithPriority","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","getModularInstance","sameRepo","samePath","sameQueryIdentifier","toJSON","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","callbackContext","container","ValueEventRegistration","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","expCallback","QueryConstraint","QueryEndAtConstraint","_value","_apply","endAt","QueryEndBeforeConstraint","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","startAfter","QueryLimitToFirstConstraint","_limit","limitToFirst","limit","QueryLimitToLastConstraint","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","equalTo","queryImpl","queryConstraints","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","OWNER","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","repoManagerForceRestClient","forceRestClient","_repoInternal","_instanceStarted","_rootInternal","_delete","apiName","checkTransportInit","forceWebSockets","forceLongPolling","getDatabase","getApp","_getProvider","identifier","emulator","getDefaultEmulatorHostnameAndPort","connectDatabaseEmulator","mockUserToken","createMockUserToken","goOffline","goOnline","enableLoggingImpl","registerDatabase","variant","_registerComponent","Component","instanceIdentifier","getProvider","setMultipleInstances","registerVersion","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","runTransaction","promiseComplete","prototype","simpleListen","echo","onEcho","hijackHash","newHash","oldPut"],"sources":["/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/version.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/storage/storage.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/util/util.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/AuthTokenProvider.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/realtime/Constants.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/RepoInfo.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/stats/StatsCollection.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/stats/StatsManager.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/realtime/TransportManager.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/realtime/Connection.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/ServerActions.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/util/EventEmitter.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/util/Path.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/PersistentConnection.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/snap/Node.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/snap/indexes/Index.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/util/SortedMap.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/snap/comparators.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/snap/snap.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/snap/LeafNode.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/snap/childSet.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/snap/IndexMap.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/Change.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/QueryParams.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/SnapshotHolder.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/stats/StatsListener.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/stats/StatsReporter.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/operation/Operation.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/operation/ListenComplete.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/operation/Overwrite.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/operation/Merge.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/CacheNode.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/EventGenerator.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/ViewCache.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/util/ImmutableTree.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/CompoundWrite.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/WriteTree.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/ViewProcessor.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/View.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/SyncPoint.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/SyncTree.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/util/ServerValues.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/util/Tree.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/util/validation.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/EventQueue.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/Repo.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/util/libs/parser.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/util/NextPushId.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/Event.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/core/view/EventRegistration.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/api/OnDisconnect.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/api/Reference_impl.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/api/Database.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/register.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/api/ServerValue.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/api/Transaction.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/api/test_access.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/database/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false,\n    public readonly isUsingEmulator: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = {\n          ...(payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          })\n        };\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams,\n    /*isUsingEmulator=*/ true\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}