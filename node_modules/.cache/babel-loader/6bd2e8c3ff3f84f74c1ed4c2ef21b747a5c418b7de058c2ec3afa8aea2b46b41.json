{"ast":null,"code":"/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function () {\n  'use strict';\n\n  /**\n   * Class constructor for Progress MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n  var MaterialProgress = function MaterialProgress(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialProgress'] = MaterialProgress;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialProgress.prototype.Constant_ = {};\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialProgress.prototype.CssClasses_ = {\n    INDETERMINATE_CLASS: 'mdl-progress__indeterminate'\n  };\n\n  /**\n   * Set the current progress of the progressbar.\n   *\n   * @param {number} p Percentage of the progress (0-100)\n   * @public\n   */\n  MaterialProgress.prototype.setProgress = function (p) {\n    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {\n      return;\n    }\n    this.progressbar_.style.width = p + '%';\n  };\n  MaterialProgress.prototype['setProgress'] = MaterialProgress.prototype.setProgress;\n\n  /**\n   * Set the current progress of the buffer.\n   *\n   * @param {number} p Percentage of the buffer (0-100)\n   * @public\n   */\n  MaterialProgress.prototype.setBuffer = function (p) {\n    this.bufferbar_.style.width = p + '%';\n    this.auxbar_.style.width = 100 - p + '%';\n  };\n  MaterialProgress.prototype['setBuffer'] = MaterialProgress.prototype.setBuffer;\n\n  /**\n   * Initialize element.\n   */\n  MaterialProgress.prototype.init = function () {\n    if (this.element_) {\n      var el = document.createElement('div');\n      el.className = 'progressbar bar bar1';\n      this.element_.appendChild(el);\n      this.progressbar_ = el;\n      el = document.createElement('div');\n      el.className = 'bufferbar bar bar2';\n      this.element_.appendChild(el);\n      this.bufferbar_ = el;\n      el = document.createElement('div');\n      el.className = 'auxbar bar bar3';\n      this.element_.appendChild(el);\n      this.auxbar_ = el;\n      this.progressbar_.style.width = '0%';\n      this.bufferbar_.style.width = '100%';\n      this.auxbar_.style.width = '0%';\n      this.element_.classList.add('is-upgraded');\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialProgress,\n    classAsString: 'MaterialProgress',\n    cssClass: 'mdl-js-progress',\n    widget: true\n  });\n})();","map":{"version":3,"names":["MaterialProgress","element","element_","init","window","prototype","Constant_","CssClasses_","INDETERMINATE_CLASS","setProgress","p","classList","contains","progressbar_","style","width","setBuffer","bufferbar_","auxbar_","el","document","createElement","className","appendChild","add","componentHandler","register","constructor","classAsString","cssClass","widget"],"sources":["/Users/soniadashti/Desktop/Landing-Page/node_modules/material-design-lite/src/progress/progress.js"],"sourcesContent":["/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  'use strict';\n\n  /**\n   * Class constructor for Progress MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n  var MaterialProgress = function MaterialProgress(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialProgress'] = MaterialProgress;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialProgress.prototype.Constant_ = {\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialProgress.prototype.CssClasses_ = {\n    INDETERMINATE_CLASS: 'mdl-progress__indeterminate'\n  };\n\n  /**\n   * Set the current progress of the progressbar.\n   *\n   * @param {number} p Percentage of the progress (0-100)\n   * @public\n   */\n  MaterialProgress.prototype.setProgress = function(p) {\n    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {\n      return;\n    }\n\n    this.progressbar_.style.width = p + '%';\n  };\n  MaterialProgress.prototype['setProgress'] =\n      MaterialProgress.prototype.setProgress;\n\n  /**\n   * Set the current progress of the buffer.\n   *\n   * @param {number} p Percentage of the buffer (0-100)\n   * @public\n   */\n  MaterialProgress.prototype.setBuffer = function(p) {\n    this.bufferbar_.style.width = p + '%';\n    this.auxbar_.style.width = (100 - p) + '%';\n  };\n  MaterialProgress.prototype['setBuffer'] =\n      MaterialProgress.prototype.setBuffer;\n\n  /**\n   * Initialize element.\n   */\n  MaterialProgress.prototype.init = function() {\n    if (this.element_) {\n      var el = document.createElement('div');\n      el.className = 'progressbar bar bar1';\n      this.element_.appendChild(el);\n      this.progressbar_ = el;\n\n      el = document.createElement('div');\n      el.className = 'bufferbar bar bar2';\n      this.element_.appendChild(el);\n      this.bufferbar_ = el;\n\n      el = document.createElement('div');\n      el.className = 'auxbar bar bar3';\n      this.element_.appendChild(el);\n      this.auxbar_ = el;\n\n      this.progressbar_.style.width = '0%';\n      this.bufferbar_.style.width = '100%';\n      this.auxbar_.style.width = '0%';\n\n      this.element_.classList.add('is-upgraded');\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialProgress,\n    classAsString: 'MaterialProgress',\n    cssClass: 'mdl-js-progress',\n    widget: true\n  });\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}