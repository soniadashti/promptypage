{"ast":null,"code":"(function () {\n  // nb. This is for IE10 and lower _only_.\n  var supportCustomEvent = window.CustomEvent;\n  if (!supportCustomEvent || typeof supportCustomEvent === 'object') {\n    supportCustomEvent = function CustomEvent(event, x) {\n      x = x || {};\n      var ev = document.createEvent('CustomEvent');\n      ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);\n      return ev;\n    };\n    supportCustomEvent.prototype = window.Event.prototype;\n  }\n\n  /**\n   * @param {Element} el to check for stacking context\n   * @return {boolean} whether this el or its parents creates a stacking context\n   */\n  function createsStackingContext(el) {\n    while (el && el !== document.body) {\n      var s = window.getComputedStyle(el);\n      var invalid = function (k, ok) {\n        return !(s[k] === undefined || s[k] === ok);\n      };\n      if (s.opacity < 1 || invalid('zIndex', 'auto') || invalid('transform', 'none') || invalid('mixBlendMode', 'normal') || invalid('filter', 'none') || invalid('perspective', 'none') || s['isolation'] === 'isolate' || s.position === 'fixed' || s.webkitOverflowScrolling === 'touch') {\n        return true;\n      }\n      el = el.parentElement;\n    }\n    return false;\n  }\n\n  /**\n   * Finds the nearest <dialog> from the passed element.\n   *\n   * @param {Element} el to search from\n   * @return {HTMLDialogElement} dialog found\n   */\n  function findNearestDialog(el) {\n    while (el) {\n      if (el.localName === 'dialog') {\n        return (/** @type {HTMLDialogElement} */el\n        );\n      }\n      el = el.parentElement;\n    }\n    return null;\n  }\n\n  /**\n   * Blur the specified element, as long as it's not the HTML body element.\n   * This works around an IE9/10 bug - blurring the body causes Windows to\n   * blur the whole application.\n   *\n   * @param {Element} el to blur\n   */\n  function safeBlur(el) {\n    if (el && el.blur && el !== document.body) {\n      el.blur();\n    }\n  }\n\n  /**\n   * @param {!NodeList} nodeList to search\n   * @param {Node} node to find\n   * @return {boolean} whether node is inside nodeList\n   */\n  function inNodeList(nodeList, node) {\n    for (var i = 0; i < nodeList.length; ++i) {\n      if (nodeList[i] === node) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {HTMLFormElement} el to check\n   * @return {boolean} whether this form has method=\"dialog\"\n   */\n  function isFormMethodDialog(el) {\n    if (!el || !el.hasAttribute('method')) {\n      return false;\n    }\n    return el.getAttribute('method').toLowerCase() === 'dialog';\n  }\n\n  /**\n   * @param {!HTMLDialogElement} dialog to upgrade\n   * @constructor\n   */\n  function dialogPolyfillInfo(dialog) {\n    this.dialog_ = dialog;\n    this.replacedStyleTop_ = false;\n    this.openAsModal_ = false;\n\n    // Set a11y role. Browsers that support dialog implicitly know this already.\n    if (!dialog.hasAttribute('role')) {\n      dialog.setAttribute('role', 'dialog');\n    }\n    dialog.show = this.show.bind(this);\n    dialog.showModal = this.showModal.bind(this);\n    dialog.close = this.close.bind(this);\n    if (!('returnValue' in dialog)) {\n      dialog.returnValue = '';\n    }\n    if ('MutationObserver' in window) {\n      var mo = new MutationObserver(this.maybeHideModal.bind(this));\n      mo.observe(dialog, {\n        attributes: true,\n        attributeFilter: ['open']\n      });\n    } else {\n      // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also\n      // seem to fire even if the element was removed as part of a parent removal. Use the removed\n      // events to force downgrade (useful if removed/immediately added).\n      var removed = false;\n      var cb = function () {\n        removed ? this.downgradeModal() : this.maybeHideModal();\n        removed = false;\n      }.bind(this);\n      var timeout;\n      var delayModel = function (ev) {\n        if (ev.target !== dialog) {\n          return;\n        } // not for a child element\n        var cand = 'DOMNodeRemoved';\n        removed |= ev.type.substr(0, cand.length) === cand;\n        window.clearTimeout(timeout);\n        timeout = window.setTimeout(cb, 0);\n      };\n      ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function (name) {\n        dialog.addEventListener(name, delayModel);\n      });\n    }\n    // Note that the DOM is observed inside DialogManager while any dialog\n    // is being displayed as a modal, to catch modal removal from the DOM.\n\n    Object.defineProperty(dialog, 'open', {\n      set: this.setOpen.bind(this),\n      get: dialog.hasAttribute.bind(dialog, 'open')\n    });\n    this.backdrop_ = document.createElement('div');\n    this.backdrop_.className = 'backdrop';\n    this.backdrop_.addEventListener('click', this.backdropClick_.bind(this));\n  }\n  dialogPolyfillInfo.prototype = {\n    get dialog() {\n      return this.dialog_;\n    },\n    /**\n     * Maybe remove this dialog from the modal top layer. This is called when\n     * a modal dialog may no longer be tenable, e.g., when the dialog is no\n     * longer open or is no longer part of the DOM.\n     */\n    maybeHideModal: function () {\n      if (this.dialog_.hasAttribute('open') && document.body.contains(this.dialog_)) {\n        return;\n      }\n      this.downgradeModal();\n    },\n    /**\n     * Remove this dialog from the modal top layer, leaving it as a non-modal.\n     */\n    downgradeModal: function () {\n      if (!this.openAsModal_) {\n        return;\n      }\n      this.openAsModal_ = false;\n      this.dialog_.style.zIndex = '';\n\n      // This won't match the native <dialog> exactly because if the user set top on a centered\n      // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's\n      // possible to polyfill this perfectly.\n      if (this.replacedStyleTop_) {\n        this.dialog_.style.top = '';\n        this.replacedStyleTop_ = false;\n      }\n\n      // Clear the backdrop and remove from the manager.\n      this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);\n      dialogPolyfill.dm.removeDialog(this);\n    },\n    /**\n     * @param {boolean} value whether to open or close this dialog\n     */\n    setOpen: function (value) {\n      if (value) {\n        this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');\n      } else {\n        this.dialog_.removeAttribute('open');\n        this.maybeHideModal(); // nb. redundant with MutationObserver\n      }\n    },\n\n    /**\n     * Handles clicks on the fake .backdrop element, redirecting them as if\n     * they were on the dialog itself.\n     *\n     * @param {!Event} e to redirect\n     */\n    backdropClick_: function (e) {\n      if (!this.dialog_.hasAttribute('tabindex')) {\n        // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be\n        // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this\n        // would not be needed - clicks would move the implicit cursor there.\n        var fake = document.createElement('div');\n        this.dialog_.insertBefore(fake, this.dialog_.firstChild);\n        fake.tabIndex = -1;\n        fake.focus();\n        this.dialog_.removeChild(fake);\n      } else {\n        this.dialog_.focus();\n      }\n      var redirectedEvent = document.createEvent('MouseEvents');\n      redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window, e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\n      this.dialog_.dispatchEvent(redirectedEvent);\n      e.stopPropagation();\n    },\n    /**\n     * Focuses on the first focusable element within the dialog. This will always blur the current\n     * focus, even if nothing within the dialog is found.\n     */\n    focus_: function () {\n      // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.\n      var target = this.dialog_.querySelector('[autofocus]:not([disabled])');\n      if (!target && this.dialog_.tabIndex >= 0) {\n        target = this.dialog_;\n      }\n      if (!target) {\n        // Note that this is 'any focusable area'. This list is probably not exhaustive, but the\n        // alternative involves stepping through and trying to focus everything.\n        var opts = ['button', 'input', 'keygen', 'select', 'textarea'];\n        var query = opts.map(function (el) {\n          return el + ':not([disabled])';\n        });\n        // TODO(samthor): tabindex values that are not numeric are not focusable.\n        query.push('[tabindex]:not([disabled]):not([tabindex=\"\"])'); // tabindex != \"\", not disabled\n        target = this.dialog_.querySelector(query.join(', '));\n      }\n      safeBlur(document.activeElement);\n      target && target.focus();\n    },\n    /**\n     * Sets the zIndex for the backdrop and dialog.\n     *\n     * @param {number} dialogZ\n     * @param {number} backdropZ\n     */\n    updateZIndex: function (dialogZ, backdropZ) {\n      if (dialogZ < backdropZ) {\n        throw new Error('dialogZ should never be < backdropZ');\n      }\n      this.dialog_.style.zIndex = dialogZ;\n      this.backdrop_.style.zIndex = backdropZ;\n    },\n    /**\n     * Shows the dialog. If the dialog is already open, this does nothing.\n     */\n    show: function () {\n      if (!this.dialog_.open) {\n        this.setOpen(true);\n        this.focus_();\n      }\n    },\n    /**\n     * Show this dialog modally.\n     */\n    showModal: function () {\n      if (this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is already open, and therefore cannot be opened modally.');\n      }\n      if (!document.body.contains(this.dialog_)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is not in a Document.');\n      }\n      if (!dialogPolyfill.dm.pushDialog(this)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: There are too many open modal dialogs.');\n      }\n      if (createsStackingContext(this.dialog_.parentElement)) {\n        console.warn('A dialog is being shown inside a stacking context. ' + 'This may cause it to be unusable. For more information, see this link: ' + 'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');\n      }\n      this.setOpen(true);\n      this.openAsModal_ = true;\n\n      // Optionally center vertically, relative to the current viewport.\n      if (dialogPolyfill.needsCentering(this.dialog_)) {\n        dialogPolyfill.reposition(this.dialog_);\n        this.replacedStyleTop_ = true;\n      } else {\n        this.replacedStyleTop_ = false;\n      }\n\n      // Insert backdrop.\n      this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);\n\n      // Focus on whatever inside the dialog.\n      this.focus_();\n    },\n    /**\n     * Closes this HTMLDialogElement. This is optional vs clearing the open\n     * attribute, however this fires a 'close' event.\n     *\n     * @param {string=} opt_returnValue to use as the returnValue\n     */\n    close: function (opt_returnValue) {\n      if (!this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'close\\' on dialog: The element does not have an \\'open\\' attribute, and therefore cannot be closed.');\n      }\n      this.setOpen(false);\n\n      // Leave returnValue untouched in case it was set directly on the element\n      if (opt_returnValue !== undefined) {\n        this.dialog_.returnValue = opt_returnValue;\n      }\n\n      // Triggering \"close\" event for any attached listeners on the <dialog>.\n      var closeEvent = new supportCustomEvent('close', {\n        bubbles: false,\n        cancelable: false\n      });\n      this.dialog_.dispatchEvent(closeEvent);\n    }\n  };\n  var dialogPolyfill = {};\n  dialogPolyfill.reposition = function (element) {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;\n    element.style.top = Math.max(scrollTop, topValue) + 'px';\n  };\n  dialogPolyfill.isInlinePositionSetByStylesheet = function (element) {\n    for (var i = 0; i < document.styleSheets.length; ++i) {\n      var styleSheet = document.styleSheets[i];\n      var cssRules = null;\n      // Some browsers throw on cssRules.\n      try {\n        cssRules = styleSheet.cssRules;\n      } catch (e) {}\n      if (!cssRules) {\n        continue;\n      }\n      for (var j = 0; j < cssRules.length; ++j) {\n        var rule = cssRules[j];\n        var selectedNodes = null;\n        // Ignore errors on invalid selector texts.\n        try {\n          selectedNodes = document.querySelectorAll(rule.selectorText);\n        } catch (e) {}\n        if (!selectedNodes || !inNodeList(selectedNodes, element)) {\n          continue;\n        }\n        var cssTop = rule.style.getPropertyValue('top');\n        var cssBottom = rule.style.getPropertyValue('bottom');\n        if (cssTop && cssTop !== 'auto' || cssBottom && cssBottom !== 'auto') {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  dialogPolyfill.needsCentering = function (dialog) {\n    var computedStyle = window.getComputedStyle(dialog);\n    if (computedStyle.position !== 'absolute') {\n      return false;\n    }\n\n    // We must determine whether the top/bottom specified value is non-auto.  In\n    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but\n    // Firefox returns the used value. So we do this crazy thing instead: check\n    // the inline style and then go through CSS rules.\n    if (dialog.style.top !== 'auto' && dialog.style.top !== '' || dialog.style.bottom !== 'auto' && dialog.style.bottom !== '') {\n      return false;\n    }\n    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);\n  };\n\n  /**\n   * @param {!Element} element to force upgrade\n   */\n  dialogPolyfill.forceRegisterDialog = function (element) {\n    if (window.HTMLDialogElement || element.showModal) {\n      console.warn('This browser already supports <dialog>, the polyfill ' + 'may not work correctly', element);\n    }\n    if (element.localName !== 'dialog') {\n      throw new Error('Failed to register dialog: The element is not a dialog.');\n    }\n    new dialogPolyfillInfo( /** @type {!HTMLDialogElement} */element);\n  };\n\n  /**\n   * @param {!Element} element to upgrade, if necessary\n   */\n  dialogPolyfill.registerDialog = function (element) {\n    if (!element.showModal) {\n      dialogPolyfill.forceRegisterDialog(element);\n    }\n  };\n\n  /**\n   * @constructor\n   */\n  dialogPolyfill.DialogManager = function () {\n    /** @type {!Array<!dialogPolyfillInfo>} */\n    this.pendingDialogStack = [];\n    var checkDOM = this.checkDOM_.bind(this);\n\n    // The overlay is used to simulate how a modal dialog blocks the document.\n    // The blocking dialog is positioned on top of the overlay, and the rest of\n    // the dialogs on the pending dialog stack are positioned below it. In the\n    // actual implementation, the modal dialog stacking is controlled by the\n    // top layer, where z-index has no effect.\n    this.overlay = document.createElement('div');\n    this.overlay.className = '_dialog_overlay';\n    this.overlay.addEventListener('click', function (e) {\n      this.forwardTab_ = undefined;\n      e.stopPropagation();\n      checkDOM([]); // sanity-check DOM\n    }.bind(this));\n    this.handleKey_ = this.handleKey_.bind(this);\n    this.handleFocus_ = this.handleFocus_.bind(this);\n    this.zIndexLow_ = 100000;\n    this.zIndexHigh_ = 100000 + 150;\n    this.forwardTab_ = undefined;\n    if ('MutationObserver' in window) {\n      this.mo_ = new MutationObserver(function (records) {\n        var removed = [];\n        records.forEach(function (rec) {\n          for (var i = 0, c; c = rec.removedNodes[i]; ++i) {\n            if (!(c instanceof Element)) {\n              continue;\n            } else if (c.localName === 'dialog') {\n              removed.push(c);\n            }\n            removed = removed.concat(c.querySelectorAll('dialog'));\n          }\n        });\n        removed.length && checkDOM(removed);\n      });\n    }\n  };\n\n  /**\n   * Called on the first modal dialog being shown. Adds the overlay and related\n   * handlers.\n   */\n  dialogPolyfill.DialogManager.prototype.blockDocument = function () {\n    document.documentElement.addEventListener('focus', this.handleFocus_, true);\n    document.addEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.observe(document, {\n      childList: true,\n      subtree: true\n    });\n  };\n\n  /**\n   * Called on the first modal dialog being removed, i.e., when no more modal\n   * dialogs are visible.\n   */\n  dialogPolyfill.DialogManager.prototype.unblockDocument = function () {\n    document.documentElement.removeEventListener('focus', this.handleFocus_, true);\n    document.removeEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.disconnect();\n  };\n\n  /**\n   * Updates the stacking of all known dialogs.\n   */\n  dialogPolyfill.DialogManager.prototype.updateStacking = function () {\n    var zIndex = this.zIndexHigh_;\n    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n      dpi.updateZIndex(--zIndex, --zIndex);\n      if (i === 0) {\n        this.overlay.style.zIndex = --zIndex;\n      }\n    }\n\n    // Make the overlay a sibling of the dialog itself.\n    var last = this.pendingDialogStack[0];\n    if (last) {\n      var p = last.dialog.parentNode || document.body;\n      p.appendChild(this.overlay);\n    } else if (this.overlay.parentNode) {\n      this.overlay.parentNode.removeChild(this.overlay);\n    }\n  };\n\n  /**\n   * @param {Element} candidate to check if contained or is the top-most modal dialog\n   * @return {boolean} whether candidate is contained in top dialog\n   */\n  dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function (candidate) {\n    while (candidate = findNearestDialog(candidate)) {\n      for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n        if (dpi.dialog === candidate) {\n          return i === 0; // only valid if top-most\n        }\n      }\n\n      candidate = candidate.parentElement;\n    }\n    return false;\n  };\n  dialogPolyfill.DialogManager.prototype.handleFocus_ = function (event) {\n    if (this.containedByTopDialog_(event.target)) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    safeBlur( /** @type {Element} */event.target);\n    if (this.forwardTab_ === undefined) {\n      return;\n    } // move focus only from a tab key\n\n    var dpi = this.pendingDialogStack[0];\n    var dialog = dpi.dialog;\n    var position = dialog.compareDocumentPosition(event.target);\n    if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n      if (this.forwardTab_) {\n        // forward\n        dpi.focus_();\n      } else {\n        // backwards\n        document.documentElement.focus();\n      }\n    } else {\n      // TODO: Focus after the dialog, is ignored.\n    }\n    return false;\n  };\n  dialogPolyfill.DialogManager.prototype.handleKey_ = function (event) {\n    this.forwardTab_ = undefined;\n    if (event.keyCode === 27) {\n      event.preventDefault();\n      event.stopPropagation();\n      var cancelEvent = new supportCustomEvent('cancel', {\n        bubbles: false,\n        cancelable: true\n      });\n      var dpi = this.pendingDialogStack[0];\n      if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) {\n        dpi.dialog.close();\n      }\n    } else if (event.keyCode === 9) {\n      this.forwardTab_ = !event.shiftKey;\n    }\n  };\n\n  /**\n   * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are\n   * removed and immediately readded don't stay modal, they become normal.\n   *\n   * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed\n   */\n  dialogPolyfill.DialogManager.prototype.checkDOM_ = function (removed) {\n    // This operates on a clone because it may cause it to change. Each change also calls\n    // updateStacking, which only actually needs to happen once. But who removes many modal dialogs\n    // at a time?!\n    var clone = this.pendingDialogStack.slice();\n    clone.forEach(function (dpi) {\n      if (removed.indexOf(dpi.dialog) !== -1) {\n        dpi.downgradeModal();\n      } else {\n        dpi.maybeHideModal();\n      }\n    });\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   * @return {boolean} whether the dialog was allowed\n   */\n  dialogPolyfill.DialogManager.prototype.pushDialog = function (dpi) {\n    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;\n    if (this.pendingDialogStack.length >= allowed) {\n      return false;\n    }\n    if (this.pendingDialogStack.unshift(dpi) === 1) {\n      this.blockDocument();\n    }\n    this.updateStacking();\n    return true;\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   */\n  dialogPolyfill.DialogManager.prototype.removeDialog = function (dpi) {\n    var index = this.pendingDialogStack.indexOf(dpi);\n    if (index === -1) {\n      return;\n    }\n    this.pendingDialogStack.splice(index, 1);\n    if (this.pendingDialogStack.length === 0) {\n      this.unblockDocument();\n    }\n    this.updateStacking();\n  };\n  dialogPolyfill.dm = new dialogPolyfill.DialogManager();\n  dialogPolyfill.formSubmitter = null;\n  dialogPolyfill.useValue = null;\n\n  /**\n   * Installs global handlers, such as click listers and native method overrides. These are needed\n   * even if a no dialog is registered, as they deal with <form method=\"dialog\">.\n   */\n  if (window.HTMLDialogElement === undefined) {\n    /**\n     * If HTMLFormElement translates method=\"DIALOG\" into 'get', then replace the descriptor with\n     * one that returns the correct value.\n     */\n    var testForm = document.createElement('form');\n    testForm.setAttribute('method', 'dialog');\n    if (testForm.method !== 'dialog') {\n      var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');\n      if (methodDescriptor) {\n        // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything\n        // and don't bother to update the element.\n        var realGet = methodDescriptor.get;\n        methodDescriptor.get = function () {\n          if (isFormMethodDialog(this)) {\n            return 'dialog';\n          }\n          return realGet.call(this);\n        };\n        var realSet = methodDescriptor.set;\n        methodDescriptor.set = function (v) {\n          if (typeof v === 'string' && v.toLowerCase() === 'dialog') {\n            return this.setAttribute('method', v);\n          }\n          return realSet.call(this, v);\n        };\n        Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);\n      }\n    }\n\n    /**\n     * Global 'click' handler, to capture the <input type=\"submit\"> or <button> element which has\n     * submitted a <form method=\"dialog\">. Needed as Safari and others don't report this inside\n     * document.activeElement.\n     */\n    document.addEventListener('click', function (ev) {\n      dialogPolyfill.formSubmitter = null;\n      dialogPolyfill.useValue = null;\n      if (ev.defaultPrevented) {\n        return;\n      } // e.g. a submit which prevents default submission\n\n      var target = /** @type {Element} */ev.target;\n      if (!target || !isFormMethodDialog(target.form)) {\n        return;\n      }\n      var valid = target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1;\n      if (!valid) {\n        if (!(target.localName === 'input' && target.type === 'image')) {\n          return;\n        }\n        // this is a <input type=\"image\">, which can submit forms\n        dialogPolyfill.useValue = ev.offsetX + ',' + ev.offsetY;\n      }\n      var dialog = findNearestDialog(target);\n      if (!dialog) {\n        return;\n      }\n      dialogPolyfill.formSubmitter = target;\n    }, false);\n\n    /**\n     * Replace the native HTMLFormElement.submit() method, as it won't fire the\n     * submit event and give us a chance to respond.\n     */\n    var nativeFormSubmit = HTMLFormElement.prototype.submit;\n    var replacementFormSubmit = function () {\n      if (!isFormMethodDialog(this)) {\n        return nativeFormSubmit.call(this);\n      }\n      var dialog = findNearestDialog(this);\n      dialog && dialog.close();\n    };\n    HTMLFormElement.prototype.submit = replacementFormSubmit;\n\n    /**\n     * Global form 'dialog' method handler. Closes a dialog correctly on submit\n     * and possibly sets its return value.\n     */\n    document.addEventListener('submit', function (ev) {\n      var form = /** @type {HTMLFormElement} */ev.target;\n      if (!isFormMethodDialog(form)) {\n        return;\n      }\n      ev.preventDefault();\n      var dialog = findNearestDialog(form);\n      if (!dialog) {\n        return;\n      }\n\n      // Forms can only be submitted via .submit() or a click (?), but anyway: sanity-check that\n      // the submitter is correct before using its value as .returnValue.\n      var s = dialogPolyfill.formSubmitter;\n      if (s && s.form === form) {\n        dialog.close(dialogPolyfill.useValue || s.value);\n      } else {\n        dialog.close();\n      }\n      dialogPolyfill.formSubmitter = null;\n    }, true);\n  }\n  dialogPolyfill['forceRegisterDialog'] = dialogPolyfill.forceRegisterDialog;\n  dialogPolyfill['registerDialog'] = dialogPolyfill.registerDialog;\n  if (typeof define === 'function' && 'amd' in define) {\n    // AMD support\n    define(function () {\n      return dialogPolyfill;\n    });\n  } else if (typeof module === 'object' && typeof module['exports'] === 'object') {\n    // CommonJS support\n    module['exports'] = dialogPolyfill;\n  } else {\n    // all others\n    window['dialogPolyfill'] = dialogPolyfill;\n  }\n})();","map":{"version":3,"names":["supportCustomEvent","window","CustomEvent","event","x","ev","document","createEvent","initCustomEvent","bubbles","cancelable","detail","prototype","Event","createsStackingContext","el","body","s","getComputedStyle","invalid","k","ok","undefined","opacity","position","webkitOverflowScrolling","parentElement","findNearestDialog","localName","safeBlur","blur","inNodeList","nodeList","node","i","length","isFormMethodDialog","hasAttribute","getAttribute","toLowerCase","dialogPolyfillInfo","dialog","dialog_","replacedStyleTop_","openAsModal_","setAttribute","show","bind","showModal","close","returnValue","mo","MutationObserver","maybeHideModal","observe","attributes","attributeFilter","removed","cb","downgradeModal","timeout","delayModel","target","cand","type","substr","clearTimeout","setTimeout","forEach","name","addEventListener","Object","defineProperty","set","setOpen","get","backdrop_","createElement","className","backdropClick_","contains","style","zIndex","top","parentNode","removeChild","dialogPolyfill","dm","removeDialog","value","removeAttribute","e","fake","insertBefore","firstChild","tabIndex","focus","redirectedEvent","initMouseEvent","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","button","relatedTarget","dispatchEvent","stopPropagation","focus_","querySelector","opts","query","map","push","join","activeElement","updateZIndex","dialogZ","backdropZ","Error","open","pushDialog","console","warn","needsCentering","reposition","nextSibling","opt_returnValue","closeEvent","element","scrollTop","documentElement","topValue","innerHeight","offsetHeight","Math","max","isInlinePositionSetByStylesheet","styleSheets","styleSheet","cssRules","j","rule","selectedNodes","querySelectorAll","selectorText","cssTop","getPropertyValue","cssBottom","computedStyle","bottom","forceRegisterDialog","HTMLDialogElement","registerDialog","DialogManager","pendingDialogStack","checkDOM","checkDOM_","overlay","forwardTab_","handleKey_","handleFocus_","zIndexLow_","zIndexHigh_","mo_","records","rec","c","removedNodes","Element","concat","blockDocument","childList","subtree","unblockDocument","removeEventListener","disconnect","updateStacking","dpi","last","p","appendChild","containedByTopDialog_","candidate","preventDefault","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","keyCode","cancelEvent","clone","slice","indexOf","allowed","unshift","index","splice","formSubmitter","useValue","testForm","method","methodDescriptor","getOwnPropertyDescriptor","HTMLFormElement","realGet","call","realSet","v","defaultPrevented","form","valid","offsetX","offsetY","nativeFormSubmit","submit","replacementFormSubmit","define","module"],"sources":["/Users/soniadashti/Desktop/Landing-Page/node_modules/dialog-polyfill/dialog-polyfill.js"],"sourcesContent":["(function() {\n\n  // nb. This is for IE10 and lower _only_.\n  var supportCustomEvent = window.CustomEvent;\n  if (!supportCustomEvent || typeof supportCustomEvent === 'object') {\n    supportCustomEvent = function CustomEvent(event, x) {\n      x = x || {};\n      var ev = document.createEvent('CustomEvent');\n      ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);\n      return ev;\n    };\n    supportCustomEvent.prototype = window.Event.prototype;\n  }\n\n  /**\n   * @param {Element} el to check for stacking context\n   * @return {boolean} whether this el or its parents creates a stacking context\n   */\n  function createsStackingContext(el) {\n    while (el && el !== document.body) {\n      var s = window.getComputedStyle(el);\n      var invalid = function(k, ok) {\n        return !(s[k] === undefined || s[k] === ok);\n      }\n      if (s.opacity < 1 ||\n          invalid('zIndex', 'auto') ||\n          invalid('transform', 'none') ||\n          invalid('mixBlendMode', 'normal') ||\n          invalid('filter', 'none') ||\n          invalid('perspective', 'none') ||\n          s['isolation'] === 'isolate' ||\n          s.position === 'fixed' ||\n          s.webkitOverflowScrolling === 'touch') {\n        return true;\n      }\n      el = el.parentElement;\n    }\n    return false;\n  }\n\n  /**\n   * Finds the nearest <dialog> from the passed element.\n   *\n   * @param {Element} el to search from\n   * @return {HTMLDialogElement} dialog found\n   */\n  function findNearestDialog(el) {\n    while (el) {\n      if (el.localName === 'dialog') {\n        return /** @type {HTMLDialogElement} */ (el);\n      }\n      el = el.parentElement;\n    }\n    return null;\n  }\n\n  /**\n   * Blur the specified element, as long as it's not the HTML body element.\n   * This works around an IE9/10 bug - blurring the body causes Windows to\n   * blur the whole application.\n   *\n   * @param {Element} el to blur\n   */\n  function safeBlur(el) {\n    if (el && el.blur && el !== document.body) {\n      el.blur();\n    }\n  }\n\n  /**\n   * @param {!NodeList} nodeList to search\n   * @param {Node} node to find\n   * @return {boolean} whether node is inside nodeList\n   */\n  function inNodeList(nodeList, node) {\n    for (var i = 0; i < nodeList.length; ++i) {\n      if (nodeList[i] === node) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {HTMLFormElement} el to check\n   * @return {boolean} whether this form has method=\"dialog\"\n   */\n  function isFormMethodDialog(el) {\n    if (!el || !el.hasAttribute('method')) {\n      return false;\n    }\n    return el.getAttribute('method').toLowerCase() === 'dialog';\n  }\n\n  /**\n   * @param {!HTMLDialogElement} dialog to upgrade\n   * @constructor\n   */\n  function dialogPolyfillInfo(dialog) {\n    this.dialog_ = dialog;\n    this.replacedStyleTop_ = false;\n    this.openAsModal_ = false;\n\n    // Set a11y role. Browsers that support dialog implicitly know this already.\n    if (!dialog.hasAttribute('role')) {\n      dialog.setAttribute('role', 'dialog');\n    }\n\n    dialog.show = this.show.bind(this);\n    dialog.showModal = this.showModal.bind(this);\n    dialog.close = this.close.bind(this);\n\n    if (!('returnValue' in dialog)) {\n      dialog.returnValue = '';\n    }\n\n    if ('MutationObserver' in window) {\n      var mo = new MutationObserver(this.maybeHideModal.bind(this));\n      mo.observe(dialog, {attributes: true, attributeFilter: ['open']});\n    } else {\n      // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also\n      // seem to fire even if the element was removed as part of a parent removal. Use the removed\n      // events to force downgrade (useful if removed/immediately added).\n      var removed = false;\n      var cb = function() {\n        removed ? this.downgradeModal() : this.maybeHideModal();\n        removed = false;\n      }.bind(this);\n      var timeout;\n      var delayModel = function(ev) {\n        if (ev.target !== dialog) { return; }  // not for a child element\n        var cand = 'DOMNodeRemoved';\n        removed |= (ev.type.substr(0, cand.length) === cand);\n        window.clearTimeout(timeout);\n        timeout = window.setTimeout(cb, 0);\n      };\n      ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function(name) {\n        dialog.addEventListener(name, delayModel);\n      });\n    }\n    // Note that the DOM is observed inside DialogManager while any dialog\n    // is being displayed as a modal, to catch modal removal from the DOM.\n\n    Object.defineProperty(dialog, 'open', {\n      set: this.setOpen.bind(this),\n      get: dialog.hasAttribute.bind(dialog, 'open')\n    });\n\n    this.backdrop_ = document.createElement('div');\n    this.backdrop_.className = 'backdrop';\n    this.backdrop_.addEventListener('click', this.backdropClick_.bind(this));\n  }\n\n  dialogPolyfillInfo.prototype = {\n\n    get dialog() {\n      return this.dialog_;\n    },\n\n    /**\n     * Maybe remove this dialog from the modal top layer. This is called when\n     * a modal dialog may no longer be tenable, e.g., when the dialog is no\n     * longer open or is no longer part of the DOM.\n     */\n    maybeHideModal: function() {\n      if (this.dialog_.hasAttribute('open') && document.body.contains(this.dialog_)) { return; }\n      this.downgradeModal();\n    },\n\n    /**\n     * Remove this dialog from the modal top layer, leaving it as a non-modal.\n     */\n    downgradeModal: function() {\n      if (!this.openAsModal_) { return; }\n      this.openAsModal_ = false;\n      this.dialog_.style.zIndex = '';\n\n      // This won't match the native <dialog> exactly because if the user set top on a centered\n      // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's\n      // possible to polyfill this perfectly.\n      if (this.replacedStyleTop_) {\n        this.dialog_.style.top = '';\n        this.replacedStyleTop_ = false;\n      }\n\n      // Clear the backdrop and remove from the manager.\n      this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);\n      dialogPolyfill.dm.removeDialog(this);\n    },\n\n    /**\n     * @param {boolean} value whether to open or close this dialog\n     */\n    setOpen: function(value) {\n      if (value) {\n        this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');\n      } else {\n        this.dialog_.removeAttribute('open');\n        this.maybeHideModal();  // nb. redundant with MutationObserver\n      }\n    },\n\n    /**\n     * Handles clicks on the fake .backdrop element, redirecting them as if\n     * they were on the dialog itself.\n     *\n     * @param {!Event} e to redirect\n     */\n    backdropClick_: function(e) {\n      if (!this.dialog_.hasAttribute('tabindex')) {\n        // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be\n        // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this\n        // would not be needed - clicks would move the implicit cursor there.\n        var fake = document.createElement('div');\n        this.dialog_.insertBefore(fake, this.dialog_.firstChild);\n        fake.tabIndex = -1;\n        fake.focus();\n        this.dialog_.removeChild(fake);\n      } else {\n        this.dialog_.focus();\n      }\n\n      var redirectedEvent = document.createEvent('MouseEvents');\n      redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,\n          e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,\n          e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\n      this.dialog_.dispatchEvent(redirectedEvent);\n      e.stopPropagation();\n    },\n\n    /**\n     * Focuses on the first focusable element within the dialog. This will always blur the current\n     * focus, even if nothing within the dialog is found.\n     */\n    focus_: function() {\n      // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.\n      var target = this.dialog_.querySelector('[autofocus]:not([disabled])');\n      if (!target && this.dialog_.tabIndex >= 0) {\n        target = this.dialog_;\n      }\n      if (!target) {\n        // Note that this is 'any focusable area'. This list is probably not exhaustive, but the\n        // alternative involves stepping through and trying to focus everything.\n        var opts = ['button', 'input', 'keygen', 'select', 'textarea'];\n        var query = opts.map(function(el) {\n          return el + ':not([disabled])';\n        });\n        // TODO(samthor): tabindex values that are not numeric are not focusable.\n        query.push('[tabindex]:not([disabled]):not([tabindex=\"\"])');  // tabindex != \"\", not disabled\n        target = this.dialog_.querySelector(query.join(', '));\n      }\n      safeBlur(document.activeElement);\n      target && target.focus();\n    },\n\n    /**\n     * Sets the zIndex for the backdrop and dialog.\n     *\n     * @param {number} dialogZ\n     * @param {number} backdropZ\n     */\n    updateZIndex: function(dialogZ, backdropZ) {\n      if (dialogZ < backdropZ) {\n        throw new Error('dialogZ should never be < backdropZ');\n      }\n      this.dialog_.style.zIndex = dialogZ;\n      this.backdrop_.style.zIndex = backdropZ;\n    },\n\n    /**\n     * Shows the dialog. If the dialog is already open, this does nothing.\n     */\n    show: function() {\n      if (!this.dialog_.open) {\n        this.setOpen(true);\n        this.focus_();\n      }\n    },\n\n    /**\n     * Show this dialog modally.\n     */\n    showModal: function() {\n      if (this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is already open, and therefore cannot be opened modally.');\n      }\n      if (!document.body.contains(this.dialog_)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is not in a Document.');\n      }\n      if (!dialogPolyfill.dm.pushDialog(this)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: There are too many open modal dialogs.');\n      }\n\n      if (createsStackingContext(this.dialog_.parentElement)) {\n        console.warn('A dialog is being shown inside a stacking context. ' +\n            'This may cause it to be unusable. For more information, see this link: ' +\n            'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');\n      }\n\n      this.setOpen(true);\n      this.openAsModal_ = true;\n\n      // Optionally center vertically, relative to the current viewport.\n      if (dialogPolyfill.needsCentering(this.dialog_)) {\n        dialogPolyfill.reposition(this.dialog_);\n        this.replacedStyleTop_ = true;\n      } else {\n        this.replacedStyleTop_ = false;\n      }\n\n      // Insert backdrop.\n      this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);\n\n      // Focus on whatever inside the dialog.\n      this.focus_();\n    },\n\n    /**\n     * Closes this HTMLDialogElement. This is optional vs clearing the open\n     * attribute, however this fires a 'close' event.\n     *\n     * @param {string=} opt_returnValue to use as the returnValue\n     */\n    close: function(opt_returnValue) {\n      if (!this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'close\\' on dialog: The element does not have an \\'open\\' attribute, and therefore cannot be closed.');\n      }\n      this.setOpen(false);\n\n      // Leave returnValue untouched in case it was set directly on the element\n      if (opt_returnValue !== undefined) {\n        this.dialog_.returnValue = opt_returnValue;\n      }\n\n      // Triggering \"close\" event for any attached listeners on the <dialog>.\n      var closeEvent = new supportCustomEvent('close', {\n        bubbles: false,\n        cancelable: false\n      });\n      this.dialog_.dispatchEvent(closeEvent);\n    }\n\n  };\n\n  var dialogPolyfill = {};\n\n  dialogPolyfill.reposition = function(element) {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;\n    element.style.top = Math.max(scrollTop, topValue) + 'px';\n  };\n\n  dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {\n    for (var i = 0; i < document.styleSheets.length; ++i) {\n      var styleSheet = document.styleSheets[i];\n      var cssRules = null;\n      // Some browsers throw on cssRules.\n      try {\n        cssRules = styleSheet.cssRules;\n      } catch (e) {}\n      if (!cssRules) { continue; }\n      for (var j = 0; j < cssRules.length; ++j) {\n        var rule = cssRules[j];\n        var selectedNodes = null;\n        // Ignore errors on invalid selector texts.\n        try {\n          selectedNodes = document.querySelectorAll(rule.selectorText);\n        } catch(e) {}\n        if (!selectedNodes || !inNodeList(selectedNodes, element)) {\n          continue;\n        }\n        var cssTop = rule.style.getPropertyValue('top');\n        var cssBottom = rule.style.getPropertyValue('bottom');\n        if ((cssTop && cssTop !== 'auto') || (cssBottom && cssBottom !== 'auto')) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  dialogPolyfill.needsCentering = function(dialog) {\n    var computedStyle = window.getComputedStyle(dialog);\n    if (computedStyle.position !== 'absolute') {\n      return false;\n    }\n\n    // We must determine whether the top/bottom specified value is non-auto.  In\n    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but\n    // Firefox returns the used value. So we do this crazy thing instead: check\n    // the inline style and then go through CSS rules.\n    if ((dialog.style.top !== 'auto' && dialog.style.top !== '') ||\n        (dialog.style.bottom !== 'auto' && dialog.style.bottom !== '')) {\n      return false;\n    }\n    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);\n  };\n\n  /**\n   * @param {!Element} element to force upgrade\n   */\n  dialogPolyfill.forceRegisterDialog = function(element) {\n    if (window.HTMLDialogElement || element.showModal) {\n      console.warn('This browser already supports <dialog>, the polyfill ' +\n          'may not work correctly', element);\n    }\n    if (element.localName !== 'dialog') {\n      throw new Error('Failed to register dialog: The element is not a dialog.');\n    }\n    new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ (element));\n  };\n\n  /**\n   * @param {!Element} element to upgrade, if necessary\n   */\n  dialogPolyfill.registerDialog = function(element) {\n    if (!element.showModal) {\n      dialogPolyfill.forceRegisterDialog(element);\n    }\n  };\n\n  /**\n   * @constructor\n   */\n  dialogPolyfill.DialogManager = function() {\n    /** @type {!Array<!dialogPolyfillInfo>} */\n    this.pendingDialogStack = [];\n\n    var checkDOM = this.checkDOM_.bind(this);\n\n    // The overlay is used to simulate how a modal dialog blocks the document.\n    // The blocking dialog is positioned on top of the overlay, and the rest of\n    // the dialogs on the pending dialog stack are positioned below it. In the\n    // actual implementation, the modal dialog stacking is controlled by the\n    // top layer, where z-index has no effect.\n    this.overlay = document.createElement('div');\n    this.overlay.className = '_dialog_overlay';\n    this.overlay.addEventListener('click', function(e) {\n      this.forwardTab_ = undefined;\n      e.stopPropagation();\n      checkDOM([]);  // sanity-check DOM\n    }.bind(this));\n\n    this.handleKey_ = this.handleKey_.bind(this);\n    this.handleFocus_ = this.handleFocus_.bind(this);\n\n    this.zIndexLow_ = 100000;\n    this.zIndexHigh_ = 100000 + 150;\n\n    this.forwardTab_ = undefined;\n\n    if ('MutationObserver' in window) {\n      this.mo_ = new MutationObserver(function(records) {\n        var removed = [];\n        records.forEach(function(rec) {\n          for (var i = 0, c; c = rec.removedNodes[i]; ++i) {\n            if (!(c instanceof Element)) {\n              continue;\n            } else if (c.localName === 'dialog') {\n              removed.push(c);\n            }\n            removed = removed.concat(c.querySelectorAll('dialog'));\n          }\n        });\n        removed.length && checkDOM(removed);\n      });\n    }\n  };\n\n  /**\n   * Called on the first modal dialog being shown. Adds the overlay and related\n   * handlers.\n   */\n  dialogPolyfill.DialogManager.prototype.blockDocument = function() {\n    document.documentElement.addEventListener('focus', this.handleFocus_, true);\n    document.addEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.observe(document, {childList: true, subtree: true});\n  };\n\n  /**\n   * Called on the first modal dialog being removed, i.e., when no more modal\n   * dialogs are visible.\n   */\n  dialogPolyfill.DialogManager.prototype.unblockDocument = function() {\n    document.documentElement.removeEventListener('focus', this.handleFocus_, true);\n    document.removeEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.disconnect();\n  };\n\n  /**\n   * Updates the stacking of all known dialogs.\n   */\n  dialogPolyfill.DialogManager.prototype.updateStacking = function() {\n    var zIndex = this.zIndexHigh_;\n\n    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n      dpi.updateZIndex(--zIndex, --zIndex);\n      if (i === 0) {\n        this.overlay.style.zIndex = --zIndex;\n      }\n    }\n\n    // Make the overlay a sibling of the dialog itself.\n    var last = this.pendingDialogStack[0];\n    if (last) {\n      var p = last.dialog.parentNode || document.body;\n      p.appendChild(this.overlay);\n    } else if (this.overlay.parentNode) {\n      this.overlay.parentNode.removeChild(this.overlay);\n    }\n  };\n\n  /**\n   * @param {Element} candidate to check if contained or is the top-most modal dialog\n   * @return {boolean} whether candidate is contained in top dialog\n   */\n  dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {\n    while (candidate = findNearestDialog(candidate)) {\n      for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n        if (dpi.dialog === candidate) {\n          return i === 0;  // only valid if top-most\n        }\n      }\n      candidate = candidate.parentElement;\n    }\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {\n    if (this.containedByTopDialog_(event.target)) { return; }\n\n    event.preventDefault();\n    event.stopPropagation();\n    safeBlur(/** @type {Element} */ (event.target));\n\n    if (this.forwardTab_ === undefined) { return; }  // move focus only from a tab key\n\n    var dpi = this.pendingDialogStack[0];\n    var dialog = dpi.dialog;\n    var position = dialog.compareDocumentPosition(event.target);\n    if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n      if (this.forwardTab_) {  // forward\n        dpi.focus_();\n      } else {  // backwards\n        document.documentElement.focus();\n      }\n    } else {\n      // TODO: Focus after the dialog, is ignored.\n    }\n\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {\n    this.forwardTab_ = undefined;\n    if (event.keyCode === 27) {\n      event.preventDefault();\n      event.stopPropagation();\n      var cancelEvent = new supportCustomEvent('cancel', {\n        bubbles: false,\n        cancelable: true\n      });\n      var dpi = this.pendingDialogStack[0];\n      if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) {\n        dpi.dialog.close();\n      }\n    } else if (event.keyCode === 9) {\n      this.forwardTab_ = !event.shiftKey;\n    }\n  };\n\n  /**\n   * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are\n   * removed and immediately readded don't stay modal, they become normal.\n   *\n   * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed\n   */\n  dialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {\n    // This operates on a clone because it may cause it to change. Each change also calls\n    // updateStacking, which only actually needs to happen once. But who removes many modal dialogs\n    // at a time?!\n    var clone = this.pendingDialogStack.slice();\n    clone.forEach(function(dpi) {\n      if (removed.indexOf(dpi.dialog) !== -1) {\n        dpi.downgradeModal();\n      } else {\n        dpi.maybeHideModal();\n      }\n    });\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   * @return {boolean} whether the dialog was allowed\n   */\n  dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {\n    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;\n    if (this.pendingDialogStack.length >= allowed) {\n      return false;\n    }\n    if (this.pendingDialogStack.unshift(dpi) === 1) {\n      this.blockDocument();\n    }\n    this.updateStacking();\n    return true;\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   */\n  dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {\n    var index = this.pendingDialogStack.indexOf(dpi);\n    if (index === -1) { return; }\n\n    this.pendingDialogStack.splice(index, 1);\n    if (this.pendingDialogStack.length === 0) {\n      this.unblockDocument();\n    }\n    this.updateStacking();\n  };\n\n  dialogPolyfill.dm = new dialogPolyfill.DialogManager();\n  dialogPolyfill.formSubmitter = null;\n  dialogPolyfill.useValue = null;\n\n  /**\n   * Installs global handlers, such as click listers and native method overrides. These are needed\n   * even if a no dialog is registered, as they deal with <form method=\"dialog\">.\n   */\n  if (window.HTMLDialogElement === undefined) {\n\n    /**\n     * If HTMLFormElement translates method=\"DIALOG\" into 'get', then replace the descriptor with\n     * one that returns the correct value.\n     */\n    var testForm = document.createElement('form');\n    testForm.setAttribute('method', 'dialog');\n    if (testForm.method !== 'dialog') {\n      var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');\n      if (methodDescriptor) {\n        // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything\n        // and don't bother to update the element.\n        var realGet = methodDescriptor.get;\n        methodDescriptor.get = function() {\n          if (isFormMethodDialog(this)) {\n            return 'dialog';\n          }\n          return realGet.call(this);\n        };\n        var realSet = methodDescriptor.set;\n        methodDescriptor.set = function(v) {\n          if (typeof v === 'string' && v.toLowerCase() === 'dialog') {\n            return this.setAttribute('method', v);\n          }\n          return realSet.call(this, v);\n        };\n        Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);\n      }\n    }\n\n    /**\n     * Global 'click' handler, to capture the <input type=\"submit\"> or <button> element which has\n     * submitted a <form method=\"dialog\">. Needed as Safari and others don't report this inside\n     * document.activeElement.\n     */\n    document.addEventListener('click', function(ev) {\n      dialogPolyfill.formSubmitter = null;\n      dialogPolyfill.useValue = null;\n      if (ev.defaultPrevented) { return; }  // e.g. a submit which prevents default submission\n\n      var target = /** @type {Element} */ (ev.target);\n      if (!target || !isFormMethodDialog(target.form)) { return; }\n\n      var valid = (target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1);\n      if (!valid) {\n        if (!(target.localName === 'input' && target.type === 'image')) { return; }\n        // this is a <input type=\"image\">, which can submit forms\n        dialogPolyfill.useValue = ev.offsetX + ',' + ev.offsetY;\n      }\n\n      var dialog = findNearestDialog(target);\n      if (!dialog) { return; }\n\n      dialogPolyfill.formSubmitter = target;\n    }, false);\n\n    /**\n     * Replace the native HTMLFormElement.submit() method, as it won't fire the\n     * submit event and give us a chance to respond.\n     */\n    var nativeFormSubmit = HTMLFormElement.prototype.submit;\n    var replacementFormSubmit = function () {\n      if (!isFormMethodDialog(this)) {\n        return nativeFormSubmit.call(this);\n      }\n      var dialog = findNearestDialog(this);\n      dialog && dialog.close();\n    };\n    HTMLFormElement.prototype.submit = replacementFormSubmit;\n\n    /**\n     * Global form 'dialog' method handler. Closes a dialog correctly on submit\n     * and possibly sets its return value.\n     */\n    document.addEventListener('submit', function(ev) {\n      var form = /** @type {HTMLFormElement} */ (ev.target);\n      if (!isFormMethodDialog(form)) { return; }\n      ev.preventDefault();\n\n      var dialog = findNearestDialog(form);\n      if (!dialog) { return; }\n\n      // Forms can only be submitted via .submit() or a click (?), but anyway: sanity-check that\n      // the submitter is correct before using its value as .returnValue.\n      var s = dialogPolyfill.formSubmitter;\n      if (s && s.form === form) {\n        dialog.close(dialogPolyfill.useValue || s.value);\n      } else {\n        dialog.close();\n      }\n      dialogPolyfill.formSubmitter = null;\n    }, true);\n  }\n\n  dialogPolyfill['forceRegisterDialog'] = dialogPolyfill.forceRegisterDialog;\n  dialogPolyfill['registerDialog'] = dialogPolyfill.registerDialog;\n\n  if (typeof define === 'function' && 'amd' in define) {\n    // AMD support\n    define(function() { return dialogPolyfill; });\n  } else if (typeof module === 'object' && typeof module['exports'] === 'object') {\n    // CommonJS support\n    module['exports'] = dialogPolyfill;\n  } else {\n    // all others\n    window['dialogPolyfill'] = dialogPolyfill;\n  }\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}