{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar component = require('@firebase/component');\nvar tslib = require('tslib');\nvar logger$1 = require('@firebase/logger');\nvar util = require('@firebase/util');\nvar idb = require('idb');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PlatformLoggerServiceImpl = /** @class */function () {\n  function PlatformLoggerServiceImpl(container) {\n    this.container = container;\n  }\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  PlatformLoggerServiceImpl.prototype.getPlatformInfoString = function () {\n    var providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers.map(function (provider) {\n      if (isVersionServiceProvider(provider)) {\n        var service = provider.getImmediate();\n        return \"\".concat(service.library, \"/\").concat(service.version);\n      } else {\n        return null;\n      }\n    }).filter(function (logString) {\n      return logString;\n    }).join(' ');\n  };\n  return PlatformLoggerServiceImpl;\n}();\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\nfunction isVersionServiceProvider(provider) {\n  var component = provider.getComponent();\n  return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* ComponentType.VERSION */;\n}\n\nvar name$o = \"@firebase/app\";\nvar version$1 = \"0.9.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logger = new logger$1.Logger('@firebase/app');\nvar name$n = \"@firebase/app-compat\";\nvar name$m = \"@firebase/analytics-compat\";\nvar name$l = \"@firebase/analytics\";\nvar name$k = \"@firebase/app-check-compat\";\nvar name$j = \"@firebase/app-check\";\nvar name$i = \"@firebase/auth\";\nvar name$h = \"@firebase/auth-compat\";\nvar name$g = \"@firebase/database\";\nvar name$f = \"@firebase/database-compat\";\nvar name$e = \"@firebase/functions\";\nvar name$d = \"@firebase/functions-compat\";\nvar name$c = \"@firebase/installations\";\nvar name$b = \"@firebase/installations-compat\";\nvar name$a = \"@firebase/messaging\";\nvar name$9 = \"@firebase/messaging-compat\";\nvar name$8 = \"@firebase/performance\";\nvar name$7 = \"@firebase/performance-compat\";\nvar name$6 = \"@firebase/remote-config\";\nvar name$5 = \"@firebase/remote-config-compat\";\nvar name$4 = \"@firebase/storage\";\nvar name$3 = \"@firebase/storage-compat\";\nvar name$2 = \"@firebase/firestore\";\nvar name$1 = \"@firebase/firestore-compat\";\nvar name = \"firebase\";\nvar version = \"9.17.2\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a$1;\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\nvar PLATFORM_LOG_STRING = (_a$1 = {}, _a$1[name$o] = 'fire-core', _a$1[name$n] = 'fire-core-compat', _a$1[name$l] = 'fire-analytics', _a$1[name$m] = 'fire-analytics-compat', _a$1[name$j] = 'fire-app-check', _a$1[name$k] = 'fire-app-check-compat', _a$1[name$i] = 'fire-auth', _a$1[name$h] = 'fire-auth-compat', _a$1[name$g] = 'fire-rtdb', _a$1[name$f] = 'fire-rtdb-compat', _a$1[name$e] = 'fire-fn', _a$1[name$d] = 'fire-fn-compat', _a$1[name$c] = 'fire-iid', _a$1[name$b] = 'fire-iid-compat', _a$1[name$a] = 'fire-fcm', _a$1[name$9] = 'fire-fcm-compat', _a$1[name$8] = 'fire-perf', _a$1[name$7] = 'fire-perf-compat', _a$1[name$6] = 'fire-rc', _a$1[name$5] = 'fire-rc-compat', _a$1[name$4] = 'fire-gcs', _a$1[name$3] = 'fire-gcs-compat', _a$1[name$2] = 'fire-fst', _a$1[name$1] = 'fire-fst-compat', _a$1['fire-js'] = 'fire-js', _a$1[name] = 'fire-js-all', _a$1);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @internal\r\n */\nvar _apps = new Map();\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar _components = new Map();\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\nfunction _addComponent(app, component) {\n  try {\n    app.container.addComponent(component);\n  } catch (e) {\n    logger.debug(\"Component \".concat(component.name, \" failed to register with FirebaseApp \").concat(app.name), e);\n  }\n}\n/**\r\n *\r\n * @internal\r\n */\nfunction _addOrOverwriteComponent(app, component) {\n  app.container.addOrOverwriteComponent(component);\n}\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\nfunction _registerComponent(component) {\n  var e_1, _a;\n  var componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\"There were multiple attempts to register component \".concat(componentName, \".\"));\n    return false;\n  }\n  _components.set(componentName, component);\n  try {\n    // add the component to existing app instances\n    for (var _b = tslib.__values(_apps.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var app = _c.value;\n      _addComponent(app, component);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return true;\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\nfunction _getProvider(app, name) {\n  var heartbeatController = app.container.getProvider('heartbeat').getImmediate({\n    optional: true\n  });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return app.container.getProvider(name);\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\nfunction _removeServiceInstance(app, name, instanceIdentifier) {\n  if (instanceIdentifier === void 0) {\n    instanceIdentifier = DEFAULT_ENTRY_NAME;\n  }\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\nfunction _clearComponents() {\n  _components.clear();\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\nvar ERRORS = (_a = {}, _a[\"no-app\" /* AppError.NO_APP */] = \"No Firebase App '{$appName}' has been created - \" + 'call Firebase App.initializeApp()', _a[\"bad-app-name\" /* AppError.BAD_APP_NAME */] = \"Illegal App name: '{$appName}\", _a[\"duplicate-app\" /* AppError.DUPLICATE_APP */] = \"Firebase App named '{$appName}' already exists with different options or config\", _a[\"app-deleted\" /* AppError.APP_DELETED */] = \"Firebase App named '{$appName}' already deleted\", _a[\"no-options\" /* AppError.NO_OPTIONS */] = 'Need to provide options, when not being deployed to hosting via source.', _a[\"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.', _a[\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */] = 'First argument to `onLog` must be null or a function.', _a[\"idb-open\" /* AppError.IDB_OPEN */] = 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.', _a[\"idb-get\" /* AppError.IDB_GET */] = 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.', _a[\"idb-set\" /* AppError.IDB_WRITE */] = 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.', _a[\"idb-delete\" /* AppError.IDB_DELETE */] = 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.', _a);\nvar ERROR_FACTORY = new util.ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar FirebaseAppImpl = /** @class */function () {\n  function FirebaseAppImpl(options, config, container) {\n    var _this = this;\n    this._isDeleted = false;\n    this._options = tslib.__assign({}, options);\n    this._config = tslib.__assign({}, config);\n    this._name = config.name;\n    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(new component.Component('app', function () {\n      return _this;\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */));\n  }\n\n  Object.defineProperty(FirebaseAppImpl.prototype, \"automaticDataCollectionEnabled\", {\n    get: function () {\n      this.checkDestroyed();\n      return this._automaticDataCollectionEnabled;\n    },\n    set: function (val) {\n      this.checkDestroyed();\n      this._automaticDataCollectionEnabled = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseAppImpl.prototype, \"name\", {\n    get: function () {\n      this.checkDestroyed();\n      return this._name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseAppImpl.prototype, \"options\", {\n    get: function () {\n      this.checkDestroyed();\n      return this._options;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseAppImpl.prototype, \"config\", {\n    get: function () {\n      this.checkDestroyed();\n      return this._config;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseAppImpl.prototype, \"container\", {\n    get: function () {\n      return this._container;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseAppImpl.prototype, \"isDeleted\", {\n    get: function () {\n      return this._isDeleted;\n    },\n    set: function (val) {\n      this._isDeleted = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * This function will throw an Error if the App has already been deleted -\r\n   * use before performing API actions on the App.\r\n   */\n  FirebaseAppImpl.prototype.checkDestroyed = function () {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(\"app-deleted\" /* AppError.APP_DELETED */, {\n        appName: this._name\n      });\n    }\n  };\n  return FirebaseAppImpl;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\nvar SDK_VERSION = version;\nfunction initializeApp(_options, rawConfig) {\n  var e_1, _a;\n  if (rawConfig === void 0) {\n    rawConfig = {};\n  }\n  var options = _options;\n  if (typeof rawConfig !== 'object') {\n    var name_1 = rawConfig;\n    rawConfig = {\n      name: name_1\n    };\n  }\n  var config = tslib.__assign({\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false\n  }, rawConfig);\n  var name = config.name;\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(\"bad-app-name\" /* AppError.BAD_APP_NAME */, {\n      appName: String(name)\n    });\n  }\n  options || (options = util.getDefaultAppConfig());\n  if (!options) {\n    throw ERROR_FACTORY.create(\"no-options\" /* AppError.NO_OPTIONS */);\n  }\n\n  var existingApp = _apps.get(name);\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (util.deepEqual(options, existingApp.options) && util.deepEqual(config, existingApp.config)) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(\"duplicate-app\" /* AppError.DUPLICATE_APP */, {\n        appName: name\n      });\n    }\n  }\n  var container = new component.ComponentContainer(name);\n  try {\n    for (var _b = tslib.__values(_components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var component$1 = _c.value;\n      container.addComponent(component$1);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  var newApp = new FirebaseAppImpl(options, config, container);\n  _apps.set(name, newApp);\n  return newApp;\n}\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\nfunction getApp(name) {\n  if (name === void 0) {\n    name = DEFAULT_ENTRY_NAME;\n  }\n  var app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(\"no-app\" /* AppError.NO_APP */, {\n      appName: name\n    });\n  }\n  return app;\n}\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\nfunction getApps() {\n  return Array.from(_apps.values());\n}\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\nfunction deleteApp(app) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var name;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          name = app.name;\n          if (!_apps.has(name)) return [3 /*break*/, 2];\n          _apps.delete(name);\n          return [4 /*yield*/, Promise.all(app.container.getProviders().map(function (provider) {\n            return provider.delete();\n          }))];\n        case 1:\n          _a.sent();\n          app.isDeleted = true;\n          _a.label = 2;\n        case 2:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\nfunction registerVersion(libraryKeyOrName, version, variant) {\n  var _a;\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\n  if (variant) {\n    library += \"-\".concat(variant);\n  }\n  var libraryMismatch = library.match(/\\s|\\//);\n  var versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    var warning = [\"Unable to register library \\\"\".concat(library, \"\\\" with version \\\"\").concat(version, \"\\\":\")];\n    if (libraryMismatch) {\n      warning.push(\"library name \\\"\".concat(library, \"\\\" contains illegal characters (whitespace or \\\"/\\\")\"));\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\"version name \\\"\".concat(version, \"\\\" contains illegal characters (whitespace or \\\"/\\\")\"));\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(new component.Component(\"\".concat(library, \"-version\"), function () {\n    return {\n      library: library,\n      version: version\n    };\n  }, \"VERSION\" /* ComponentType.VERSION */));\n}\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\nfunction onLog(logCallback, options) {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */);\n  }\n\n  logger$1.setUserLogHandler(logCallback, options);\n}\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\nfunction setLogLevel(logLevel) {\n  logger$1.setLogLevel(logLevel);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DB_NAME = 'firebase-heartbeat-database';\nvar DB_VERSION = 1;\nvar STORE_NAME = 'firebase-heartbeat-store';\nvar dbPromise = null;\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = idb.openDB(DB_NAME, DB_VERSION, {\n      upgrade: function (db, oldVersion) {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(function (e) {\n      throw ERROR_FACTORY.create(\"idb-open\" /* AppError.IDB_OPEN */, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\nfunction readHeartbeatsFromIndexedDB(app) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var db, e_1, idbGetError;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n          return [4 /*yield*/, getDbPromise()];\n        case 1:\n          db = _a.sent();\n          return [2 /*return*/, db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app))];\n        case 2:\n          e_1 = _a.sent();\n          if (e_1 instanceof util.FirebaseError) {\n            logger.warn(e_1.message);\n          } else {\n            idbGetError = ERROR_FACTORY.create(\"idb-get\" /* AppError.IDB_GET */, {\n              originalErrorMessage: e_1 === null || e_1 === void 0 ? void 0 : e_1.message\n            });\n            logger.warn(idbGetError.message);\n          }\n          return [3 /*break*/, 3];\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction writeHeartbeatsToIndexedDB(app, heartbeatObject) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var db, tx, objectStore, e_2, idbGetError;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 3,, 4]);\n          return [4 /*yield*/, getDbPromise()];\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(STORE_NAME, 'readwrite');\n          objectStore = tx.objectStore(STORE_NAME);\n          return [4 /*yield*/, objectStore.put(heartbeatObject, computeKey(app))];\n        case 2:\n          _a.sent();\n          return [2 /*return*/, tx.done];\n        case 3:\n          e_2 = _a.sent();\n          if (e_2 instanceof util.FirebaseError) {\n            logger.warn(e_2.message);\n          } else {\n            idbGetError = ERROR_FACTORY.create(\"idb-set\" /* AppError.IDB_WRITE */, {\n              originalErrorMessage: e_2 === null || e_2 === void 0 ? void 0 : e_2.message\n            });\n            logger.warn(idbGetError.message);\n          }\n          return [3 /*break*/, 4];\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction computeKey(app) {\n  return \"\".concat(app.name, \"!\").concat(app.options.appId);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar MAX_HEADER_BYTES = 1024;\n// 30 days\nvar STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\nvar HeartbeatServiceImpl = /** @class */function () {\n  function HeartbeatServiceImpl(container) {\n    var _this = this;\n    this.container = container;\n    /**\r\n     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n     * the header string.\r\n     * Stores one record per date. This will be consolidated into the standard\r\n     * format of one record per user agent string before being sent as a header.\r\n     * Populated from indexedDB when the controller is instantiated and should\r\n     * be kept in sync with indexedDB.\r\n     * Leave public for easier testing.\r\n     */\n    this._heartbeatsCache = null;\n    var app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(function (result) {\n      _this._heartbeatsCache = result;\n      return result;\n    });\n  }\n  /**\r\n   * Called to report a heartbeat. The function will generate\r\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n   * to IndexedDB.\r\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n   * already logged, subsequent calls to this function in the same day will be ignored.\r\n   */\n  HeartbeatServiceImpl.prototype.triggerHeartbeat = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var platformLogger, agent, date, _a;\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            platformLogger = this.container.getProvider('platform-logger').getImmediate();\n            agent = platformLogger.getPlatformInfoString();\n            date = getUTCDateString();\n            if (!(this._heartbeatsCache === null)) return [3 /*break*/, 2];\n            _a = this;\n            return [4 /*yield*/, this._heartbeatsCachePromise];\n          case 1:\n            _a._heartbeatsCache = _b.sent();\n            _b.label = 2;\n          case 2:\n            // Do not store a heartbeat if one is already stored for this day\n            // or if a header has already been sent today.\n            if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(function (singleDateHeartbeat) {\n              return singleDateHeartbeat.date === date;\n            })) {\n              return [2 /*return*/];\n            } else {\n              // There is no entry for this date. Create one.\n              this._heartbeatsCache.heartbeats.push({\n                date: date,\n                agent: agent\n              });\n            }\n            // Remove entries older than 30 days.\n            this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(function (singleDateHeartbeat) {\n              var hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n              var now = Date.now();\n              return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n            });\n            return [2 /*return*/, this._storage.overwrite(this._heartbeatsCache)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n   * It also clears all heartbeats from memory as well as in IndexedDB.\r\n   *\r\n   * NOTE: Consuming product SDKs should not send the header if this method\r\n   * returns an empty string.\r\n   */\n  HeartbeatServiceImpl.prototype.getHeartbeatsHeader = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var date, _a, heartbeatsToSend, unsentEntries, headerString;\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(this._heartbeatsCache === null)) return [3 /*break*/, 2];\n            return [4 /*yield*/, this._heartbeatsCachePromise];\n          case 1:\n            _b.sent();\n            _b.label = 2;\n          case 2:\n            // If it's still null or the array is empty, there is no data to send.\n            if (this._heartbeatsCache === null || this._heartbeatsCache.heartbeats.length === 0) {\n              return [2 /*return*/, ''];\n            }\n            date = getUTCDateString();\n            _a = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats), heartbeatsToSend = _a.heartbeatsToSend, unsentEntries = _a.unsentEntries;\n            headerString = util.base64urlEncodeWithoutPadding(JSON.stringify({\n              version: 2,\n              heartbeats: heartbeatsToSend\n            }));\n            // Store last sent date to prevent another being logged/sent for the same day.\n            this._heartbeatsCache.lastSentHeartbeatDate = date;\n            if (!(unsentEntries.length > 0)) return [3 /*break*/, 4];\n            // Store any unsent entries if they exist.\n            this._heartbeatsCache.heartbeats = unsentEntries;\n            // This seems more likely than emptying the array (below) to lead to some odd state\n            // since the cache isn't empty and this will be called again on the next request,\n            // and is probably safest if we await it.\n            return [4 /*yield*/, this._storage.overwrite(this._heartbeatsCache)];\n          case 3:\n            // This seems more likely than emptying the array (below) to lead to some odd state\n            // since the cache isn't empty and this will be called again on the next request,\n            // and is probably safest if we await it.\n            _b.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            this._heartbeatsCache.heartbeats = [];\n            // Do not wait for this, to reduce latency.\n            void this._storage.overwrite(this._heartbeatsCache);\n            _b.label = 5;\n          case 5:\n            return [2 /*return*/, headerString];\n        }\n      });\n    });\n  };\n  return HeartbeatServiceImpl;\n}();\nfunction getUTCDateString() {\n  var today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize) {\n  var e_1, _a;\n  if (maxSize === void 0) {\n    maxSize = MAX_HEADER_BYTES;\n  }\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  var heartbeatsToSend = [];\n  // Single date format heartbeats that are not sent.\n  var unsentEntries = heartbeatsCache.slice();\n  var _loop_1 = function (singleDateHeartbeat) {\n    // Look for an existing entry with the same user agent.\n    var heartbeatEntry = heartbeatsToSend.find(function (hb) {\n      return hb.agent === singleDateHeartbeat.agent;\n    });\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        return \"break\";\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        return \"break\";\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  };\n  try {\n    for (var heartbeatsCache_1 = tslib.__values(heartbeatsCache), heartbeatsCache_1_1 = heartbeatsCache_1.next(); !heartbeatsCache_1_1.done; heartbeatsCache_1_1 = heartbeatsCache_1.next()) {\n      var singleDateHeartbeat = heartbeatsCache_1_1.value;\n      var state_1 = _loop_1(singleDateHeartbeat);\n      if (state_1 === \"break\") break;\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (heartbeatsCache_1_1 && !heartbeatsCache_1_1.done && (_a = heartbeatsCache_1.return)) _a.call(heartbeatsCache_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return {\n    heartbeatsToSend: heartbeatsToSend,\n    unsentEntries: unsentEntries\n  };\n}\nvar HeartbeatStorageImpl = /** @class */function () {\n  function HeartbeatStorageImpl(app) {\n    this.app = app;\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  HeartbeatStorageImpl.prototype.runIndexedDBEnvironmentCheck = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        if (!util.isIndexedDBAvailable()) {\n          return [2 /*return*/, false];\n        } else {\n          return [2 /*return*/, util.validateIndexedDBOpenable().then(function () {\n            return true;\n          }).catch(function () {\n            return false;\n          })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Read all heartbeats.\r\n   */\n  HeartbeatStorageImpl.prototype.read = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var canUseIndexedDB, idbHeartbeatObject;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._canUseIndexedDBPromise];\n          case 1:\n            canUseIndexedDB = _a.sent();\n            if (!!canUseIndexedDB) return [3 /*break*/, 2];\n            return [2 /*return*/, {\n              heartbeats: []\n            }];\n          case 2:\n            return [4 /*yield*/, readHeartbeatsFromIndexedDB(this.app)];\n          case 3:\n            idbHeartbeatObject = _a.sent();\n            return [2 /*return*/, idbHeartbeatObject || {\n              heartbeats: []\n            }];\n        }\n      });\n    });\n  };\n  // overwrite the storage with the provided heartbeats\n  HeartbeatStorageImpl.prototype.overwrite = function (heartbeatsObject) {\n    var _a;\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var canUseIndexedDB, existingHeartbeatsObject;\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this._canUseIndexedDBPromise];\n          case 1:\n            canUseIndexedDB = _b.sent();\n            if (!!canUseIndexedDB) return [3 /*break*/, 2];\n            return [2 /*return*/];\n          case 2:\n            return [4 /*yield*/, this.read()];\n          case 3:\n            existingHeartbeatsObject = _b.sent();\n            return [2 /*return*/, writeHeartbeatsToIndexedDB(this.app, {\n              lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n              heartbeats: heartbeatsObject.heartbeats\n            })];\n        }\n      });\n    });\n  };\n  // add heartbeats\n  HeartbeatStorageImpl.prototype.add = function (heartbeatsObject) {\n    var _a;\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var canUseIndexedDB, existingHeartbeatsObject;\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this._canUseIndexedDBPromise];\n          case 1:\n            canUseIndexedDB = _b.sent();\n            if (!!canUseIndexedDB) return [3 /*break*/, 2];\n            return [2 /*return*/];\n          case 2:\n            return [4 /*yield*/, this.read()];\n          case 3:\n            existingHeartbeatsObject = _b.sent();\n            return [2 /*return*/, writeHeartbeatsToIndexedDB(this.app, {\n              lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n              heartbeats: tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(existingHeartbeatsObject.heartbeats), false), tslib.__read(heartbeatsObject.heartbeats), false)\n            })];\n        }\n      });\n    });\n  };\n  return HeartbeatStorageImpl;\n}();\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\nfunction countBytes(heartbeatsCache) {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return util.base64urlEncodeWithoutPadding(\n  // heartbeatsCache wrapper properties\n  JSON.stringify({\n    version: 2,\n    heartbeats: heartbeatsCache\n  })).length;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerCoreComponents(variant) {\n  _registerComponent(new component.Component('platform-logger', function (container) {\n    return new PlatformLoggerServiceImpl(container);\n  }, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  _registerComponent(new component.Component('heartbeat', function (container) {\n    return new HeartbeatServiceImpl(container);\n  }, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  // Register `app` package.\n  registerVersion(name$o, version$1, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name$o, version$1, 'cjs5');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\nregisterCoreComponents('node');\nObject.defineProperty(exports, 'FirebaseError', {\n  enumerable: true,\n  get: function () {\n    return util.FirebaseError;\n  }\n});\nexports.SDK_VERSION = SDK_VERSION;\nexports._DEFAULT_ENTRY_NAME = DEFAULT_ENTRY_NAME;\nexports._addComponent = _addComponent;\nexports._addOrOverwriteComponent = _addOrOverwriteComponent;\nexports._apps = _apps;\nexports._clearComponents = _clearComponents;\nexports._components = _components;\nexports._getProvider = _getProvider;\nexports._registerComponent = _registerComponent;\nexports._removeServiceInstance = _removeServiceInstance;\nexports.deleteApp = deleteApp;\nexports.getApp = getApp;\nexports.getApps = getApps;\nexports.initializeApp = initializeApp;\nexports.onLog = onLog;\nexports.registerVersion = registerVersion;\nexports.setLogLevel = setLogLevel;","map":{"version":3,"mappings":"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","names":["container","PlatformLoggerServiceImpl","providers","getProviders","map","isVersionServiceProvider","provider","service","getImmediate","library","version","filter","join","component","getComponent","type","logger","Logger","DEFAULT_ENTRY_NAME","PLATFORM_LOG_STRING","_a","Map","_addComponent","app","addComponent","e","debug","name","_addOrOverwriteComponent","addOrOverwriteComponent","_registerComponent","componentName","_components","has","set","values","_getProvider","heartbeatController","getProvider","optional","triggerHeartbeat","_removeServiceInstance","instanceIdentifier","clearInstance","_clearComponents","clear","ERRORS","ERROR_FACTORY","ErrorFactory","options","config","_this","_options","__assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","Component","Object","FirebaseAppImpl","get","checkDestroyed","val","_isDeleted","isDeleted","create","appName","SDK_VERSION","initializeApp","rawConfig","name_1","String","getDefaultAppConfig","existingApp","_apps","deepEqual","ComponentContainer","newApp","getApp","getApps","Array","from","deleteApp","delete","Promise","all","registerVersion","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","push","warn","onLog","logCallback","setUserLogHandler","setLogLevel","logLevel","setLogLevelImpl","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","openDB","upgrade","db","oldVersion","createObjectStore","catch","originalErrorMessage","message","readHeartbeatsFromIndexedDB","transaction","objectStore","computeKey","e_1","FirebaseError","idbGetError","writeHeartbeatsToIndexedDB","heartbeatObject","tx","put","done","e_2","appId","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","then","_heartbeatsCache","result","HeartbeatServiceImpl","platformLogger","agent","getPlatformInfoString","date","getUTCDateString","_b","lastSentHeartbeatDate","heartbeats","some","hbTimestamp","Date","singleDateHeartbeat","valueOf","now","overwrite","length","extractHeartbeatsForHeader","heartbeatsToSend","unsentEntries","headerString","base64urlEncodeWithoutPadding","JSON","stringify","today","toISOString","substring","heartbeatsCache","maxSize","slice","heartbeatEntry","find","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","isIndexedDBAvailable","validateIndexedDBOpenable","canUseIndexedDB","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","registerCoreComponents"],"sources":["/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/app/src/platformLoggerService.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/app/src/logger.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/app/src/constants.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/app/src/internal.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/app/src/errors.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/app/src/firebaseApp.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/app/src/api.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/app/src/indexeddb.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/app/src/heartbeatService.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/app/src/registerCoreComponents.ts","/Users/soniadashti/Desktop/Landing-Page/node_modules/@firebase/app/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}